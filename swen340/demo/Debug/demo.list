
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000094c  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030ac  080030ac  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080030ac  080030ac  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030ac  080030ac  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030ac  080030ac  000130ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080030b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000064  08003118  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003118  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c2e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000136c  00000000  00000000  00026cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000358  00000000  00000000  00028030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a0  00000000  00000000  00028388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264c3  00000000  00000000  00028628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000513f  00000000  00000000  0004eaeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4a8f  00000000  00000000  00053c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001386b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012e4  00000000  00000000  0013870c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002748 	.word	0x08002748

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08002748 	.word	0x08002748

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <GPIO_Output_Init>:
// GPIO Output initialization for GPIO banks A, B, C, and D only
// Expects GPIO to be GPIOA, GPIOB, GPIOC, or GPIOD.
// pin is expected to be 0 through 15
// Note -- if the clock is not enabled the 16 GPIO pins are non-functional!
void GPIO_Output_Init( GPIO_TypeDef *GPIO, uint32_t pin )
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	// Enable the peripheral clocks of for GPIO
	if ( GPIO == GPIOA )
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002b0:	d106      	bne.n	80002c0 <GPIO_Output_Init+0x20>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN ;
 80002b2:	4b36      	ldr	r3, [pc, #216]	; (800038c <GPIO_Output_Init+0xec>)
 80002b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b6:	4a35      	ldr	r2, [pc, #212]	; (800038c <GPIO_Output_Init+0xec>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002be:	e01f      	b.n	8000300 <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOB )
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a33      	ldr	r2, [pc, #204]	; (8000390 <GPIO_Output_Init+0xf0>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_Output_Init+0x36>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN ;
 80002c8:	4b30      	ldr	r3, [pc, #192]	; (800038c <GPIO_Output_Init+0xec>)
 80002ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002cc:	4a2f      	ldr	r2, [pc, #188]	; (800038c <GPIO_Output_Init+0xec>)
 80002ce:	f043 0302 	orr.w	r3, r3, #2
 80002d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002d4:	e014      	b.n	8000300 <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOC )
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2e      	ldr	r2, [pc, #184]	; (8000394 <GPIO_Output_Init+0xf4>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_Output_Init+0x4c>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN ;
 80002de:	4b2b      	ldr	r3, [pc, #172]	; (800038c <GPIO_Output_Init+0xec>)
 80002e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e2:	4a2a      	ldr	r2, [pc, #168]	; (800038c <GPIO_Output_Init+0xec>)
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ea:	e009      	b.n	8000300 <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOD )
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2a      	ldr	r2, [pc, #168]	; (8000398 <GPIO_Output_Init+0xf8>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d145      	bne.n	8000380 <GPIO_Output_Init+0xe0>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN ;
 80002f4:	4b25      	ldr	r3, [pc, #148]	; (800038c <GPIO_Output_Init+0xec>)
 80002f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f8:	4a24      	ldr	r2, [pc, #144]	; (800038c <GPIO_Output_Init+0xec>)
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	64d3      	str	r3, [r2, #76]	; 0x4c
	else
		return ;

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIO->MODER &= ~( (uint32_t)3 << ( 2 * pin ) ) ;  // clear to input mode (00)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	2103      	movs	r1, #3
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	43db      	mvns	r3, r3
 8000310:	401a      	ands	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	601a      	str	r2, [r3, #0]
	GPIO->MODER |= (uint32_t)1 << ( 2 * pin ) ;      //  Output(01)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	2101      	movs	r1, #1
 8000320:	fa01 f303 	lsl.w	r3, r1, r3
 8000324:	431a      	orrs	r2, r3
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIO->OSPEEDR &= ~( (uint32_t)3 << ( 2 * pin ) ) ;	// set to cleared which is low speed
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	689a      	ldr	r2, [r3, #8]
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	2103      	movs	r1, #3
 8000334:	fa01 f303 	lsl.w	r3, r1, r3
 8000338:	43db      	mvns	r3, r3
 800033a:	401a      	ands	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	609a      	str	r2, [r3, #8]
	GPIO->OSPEEDR |=   (uint32_t)3 << ( 2 * pin ) ;  // High speed
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	005b      	lsls	r3, r3, #1
 8000348:	2103      	movs	r1, #3
 800034a:	fa01 f303 	lsl.w	r3, r1, r3
 800034e:	431a      	orrs	r2, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	609a      	str	r2, [r3, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIO->OTYPER &= ~( (uint32_t)1 << pin ) ;       // Push-pull
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	685a      	ldr	r2, [r3, #4]
 8000358:	2101      	movs	r1, #1
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fa01 f303 	lsl.w	r3, r1, r3
 8000360:	43db      	mvns	r3, r3
 8000362:	401a      	ands	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	605a      	str	r2, [r3, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIO->PUPDR   &= ~( (uint32_t)3 << ( 2 * pin ) ) ;  // No pull-up, no pull-down
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	68da      	ldr	r2, [r3, #12]
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	2103      	movs	r1, #3
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	43db      	mvns	r3, r3
 8000378:	401a      	ands	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	e000      	b.n	8000382 <GPIO_Output_Init+0xe2>
		return ;
 8000380:	bf00      	nop
}
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	40021000 	.word	0x40021000
 8000390:	48000400 	.word	0x48000400
 8000394:	48000800 	.word	0x48000800
 8000398:	48000c00 	.word	0x48000c00

0800039c <LED_Init>:

// set up PA5, PA6, and PA7 to drive LEDs
void LED_Init(void){
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	GPIO_Output_Init( GPIOA, NUCLEO_GREEN_LED_PIN ) ;	// hard wired PA5 to on-board LD2 LED
 80003a0:	2105      	movs	r1, #5
 80003a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a6:	f7ff ff7b 	bl	80002a0 <GPIO_Output_Init>
	GPIO_Output_Init( GPIOA, ARDUINO_D12 ) ;		// init PA6 as output (D12)
 80003aa:	2106      	movs	r1, #6
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f7ff ff76 	bl	80002a0 <GPIO_Output_Init>
	GPIO_Output_Init( GPIOA, ARDUINO_D11 ) ;		// init PA7 as output (D11)
 80003b4:	2107      	movs	r1, #7
 80003b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ba:	f7ff ff71 	bl	80002a0 <GPIO_Output_Init>
	GPIO_Output_Init( GPIOA, ARDUINO_D10 ) ;		// init PA8 as output (D10)
 80003be:	2108      	movs	r1, #8
 80003c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c4:	f7ff ff6c 	bl	80002a0 <GPIO_Output_Init>
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}

080003cc <GLED_On>:

//******************************************************************************************
// Turn Green LED On and GPIOA 6 and 7 to ON
//******************************************************************************************
void GLED_On(void){
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (uint32_t)1 << NUCLEO_GREEN_LED_PIN ; // PA5
 80003d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6153      	str	r3, [r2, #20]
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr

080003ea <RLED_On>:

void RLED_On(void){
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (uint32_t)1 << ARDUINO_D12 ;	// PA6
 80003ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003fc:	6153      	str	r3, [r2, #20]
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <LED_Off>:
}

//******************************************************************************************
// Turn Green LED Off and GPIOA 6 and 7 to OFF
//******************************************************************************************
void LED_Off(void){
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~( (uint32_t)1 << NUCLEO_GREEN_LED_PIN );
 800040c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000416:	f023 0320 	bic.w	r3, r3, #32
 800041a:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~( (uint32_t)1 << ARDUINO_D12 ) ;	// PA6
 800041c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800042a:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~( (uint32_t)1 << ARDUINO_D11 ) ;	// PA7
 800042c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800043a:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~( (uint32_t)1 << ARDUINO_D10 ) ;	// PA8
 800043c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000446:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800044a:	6153      	str	r3, [r2, #20]
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <GLED_Off>:

void GLED_Off(void){
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~( (uint32_t)1 << NUCLEO_GREEN_LED_PIN );
 800045a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000464:	f023 0320 	bic.w	r3, r3, #32
 8000468:	6153      	str	r3, [r2, #20]
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <RLED_Off>:

void RLED_Off(void){
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~( (uint32_t)1 << ARDUINO_D12 ) ;	// PA6
 8000478:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000486:	6153      	str	r3, [r2, #20]
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <GLED_Toggle>:
}

//******************************************************************************************
// Set Green LD2 Nucleo LED and GPIOA 6 and 7 to opposite states
//******************************************************************************************
void GLED_Toggle(void){
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= (uint32_t)1 << NUCLEO_GREEN_LED_PIN ;
 8000496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004a0:	f083 0320 	eor.w	r3, r3, #32
 80004a4:	6153      	str	r3, [r2, #20]
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <RLED_Toggle>:

void RLED_Toggle(void){
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= (uint32_t)1 << ARDUINO_D12 ;	// PA6
 80004b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004be:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80004c2:	6153      	str	r3, [r2, #20]
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <BLED_Toggle>:

void BLED_Toggle(void){
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= (uint32_t)1 << ARDUINO_D11 ;	// PA7
 80004d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004dc:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80004e0:	6153      	str	r3, [r2, #20]
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80004f2:	4b6b      	ldr	r3, [pc, #428]	; (80006a0 <System_Clock_Init+0x1b4>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a6a      	ldr	r2, [pc, #424]	; (80006a0 <System_Clock_Init+0x1b4>)
 80004f8:	f023 0307 	bic.w	r3, r3, #7
 80004fc:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80004fe:	4b68      	ldr	r3, [pc, #416]	; (80006a0 <System_Clock_Init+0x1b4>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a67      	ldr	r2, [pc, #412]	; (80006a0 <System_Clock_Init+0x1b4>)
 8000504:	f043 0302 	orr.w	r3, r3, #2
 8000508:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 800050a:	4b66      	ldr	r3, [pc, #408]	; (80006a4 <System_Clock_Init+0x1b8>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a65      	ldr	r2, [pc, #404]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000514:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000516:	bf00      	nop
 8000518:	4b62      	ldr	r3, [pc, #392]	; (80006a4 <System_Clock_Init+0x1b8>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0f9      	beq.n	8000518 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000524:	2310      	movs	r3, #16
 8000526:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000528:	4b5e      	ldr	r3, [pc, #376]	; (80006a4 <System_Clock_Init+0x1b8>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	4a5d      	ldr	r2, [pc, #372]	; (80006a4 <System_Clock_Init+0x1b8>)
 800052e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000532:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000534:	4b5b      	ldr	r3, [pc, #364]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000536:	685a      	ldr	r2, [r3, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	061b      	lsls	r3, r3, #24
 800053c:	4959      	ldr	r1, [pc, #356]	; (80006a4 <System_Clock_Init+0x1b8>)
 800053e:	4313      	orrs	r3, r2
 8000540:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000542:	4b58      	ldr	r3, [pc, #352]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a57      	ldr	r2, [pc, #348]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000548:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800054c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 800054e:	bf00      	nop
 8000550:	4b54      	ldr	r3, [pc, #336]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800055c:	d0f8      	beq.n	8000550 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 800055e:	4b51      	ldr	r3, [pc, #324]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	4a50      	ldr	r2, [pc, #320]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000564:	f023 0303 	bic.w	r3, r3, #3
 8000568:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800056a:	4b4e      	ldr	r3, [pc, #312]	; (80006a4 <System_Clock_Init+0x1b8>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	4a4d      	ldr	r2, [pc, #308]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8000576:	4b4b      	ldr	r3, [pc, #300]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800057e:	4a49      	ldr	r2, [pc, #292]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000580:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000584:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8000586:	4b47      	ldr	r3, [pc, #284]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800058e:	4a45      	ldr	r2, [pc, #276]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8000596:	4b43      	ldr	r3, [pc, #268]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	4a42      	ldr	r2, [pc, #264]	; (80006a4 <System_Clock_Init+0x1b8>)
 800059c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80005a0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 80005a2:	4b40      	ldr	r3, [pc, #256]	; (80006a4 <System_Clock_Init+0x1b8>)
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	4a3f      	ldr	r2, [pc, #252]	; (80006a4 <System_Clock_Init+0x1b8>)
 80005a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005ac:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 80005ae:	4b3d      	ldr	r3, [pc, #244]	; (80006a4 <System_Clock_Init+0x1b8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a3c      	ldr	r2, [pc, #240]	; (80006a4 <System_Clock_Init+0x1b8>)
 80005b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005b8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80005ba:	bf00      	nop
 80005bc:	4b39      	ldr	r3, [pc, #228]	; (80006a4 <System_Clock_Init+0x1b8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0f9      	beq.n	80005bc <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80005c8:	4b36      	ldr	r3, [pc, #216]	; (80006a4 <System_Clock_Init+0x1b8>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	4a35      	ldr	r2, [pc, #212]	; (80006a4 <System_Clock_Init+0x1b8>)
 80005ce:	f023 0303 	bic.w	r3, r3, #3
 80005d2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 80005d4:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <System_Clock_Init+0x1b8>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	4a32      	ldr	r2, [pc, #200]	; (80006a4 <System_Clock_Init+0x1b8>)
 80005da:	f043 0303 	orr.w	r3, r3, #3
 80005de:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80005e0:	bf00      	nop
 80005e2:	4b30      	ldr	r3, [pc, #192]	; (80006a4 <System_Clock_Init+0x1b8>)
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	f003 030c 	and.w	r3, r3, #12
 80005ea:	2b0c      	cmp	r3, #12
 80005ec:	d1f9      	bne.n	80005e2 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80005ee:	4b2d      	ldr	r3, [pc, #180]	; (80006a4 <System_Clock_Init+0x1b8>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a2c      	ldr	r2, [pc, #176]	; (80006a4 <System_Clock_Init+0x1b8>)
 80005f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005f8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80005fa:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <System_Clock_Init+0x1b8>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4a29      	ldr	r2, [pc, #164]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000600:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000604:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 8000606:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	4a26      	ldr	r2, [pc, #152]	; (80006a4 <System_Clock_Init+0x1b8>)
 800060c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000610:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000612:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a23      	ldr	r2, [pc, #140]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000618:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800061c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 800061e:	bf00      	nop
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000628:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800062c:	d0f8      	beq.n	8000620 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000630:	691b      	ldr	r3, [r3, #16]
 8000632:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000634:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000638:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <System_Clock_Init+0x1b8>)
 800063c:	691b      	ldr	r3, [r3, #16]
 800063e:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000640:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000644:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000648:	691b      	ldr	r3, [r3, #16]
 800064a:	4a16      	ldr	r2, [pc, #88]	; (80006a4 <System_Clock_Init+0x1b8>)
 800064c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000650:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000654:	691b      	ldr	r3, [r3, #16]
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065c:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000664:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000668:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800066a:	bf00      	nop
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <System_Clock_Init+0x1b8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000674:	2b00      	cmp	r3, #0
 8000676:	d0f9      	beq.n	800066c <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <System_Clock_Init+0x1b8>)
 800067a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067e:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <System_Clock_Init+0x1b8>)
 8000680:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <System_Clock_Init+0x1b8>)
 800068a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800068c:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <System_Clock_Init+0x1b8>)
 800068e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000692:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40022000 	.word	0x40022000
 80006a4:	40021000 	.word	0x40021000

080006a8 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <UART2_Init+0x40>)
 80006ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <UART2_Init+0x40>)
 80006b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b6:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <UART2_Init+0x40>)
 80006ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <UART2_Init+0x40>)
 80006c0:	f023 030c 	bic.w	r3, r3, #12
 80006c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <UART2_Init+0x40>)
 80006ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ce:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <UART2_Init+0x40>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 80006d8:	f000 f80a 	bl	80006f0 <UART2_GPIO_Init>
	USART_Init(USART2);
 80006dc:	4803      	ldr	r0, [pc, #12]	; (80006ec <UART2_Init+0x44>)
 80006de:	f000 f84f 	bl	8000780 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40004400 	.word	0x40004400

080006f0 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <UART2_GPIO_Init+0x8c>)
 80006f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f8:	4a20      	ldr	r2, [pc, #128]	; (800077c <UART2_GPIO_Init+0x8c>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000700:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800070a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800070e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000710:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800071a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800071e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000720:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000724:	6a1b      	ldr	r3, [r3, #32]
 8000726:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800072a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800072e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000730:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000734:	6a1b      	ldr	r3, [r3, #32]
 8000736:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800073a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800073e:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000740:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800074a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800074e:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000750:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800075a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800075e:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000760:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800076a:	f023 030c 	bic.w	r3, r3, #12
 800076e:	6053      	str	r3, [r2, #4]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000

08000780 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f023 0201 	bic.w	r2, r3, #1
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f242 028d 	movw	r2, #8333	; 0x208d
 80007be:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f043 020c 	orr.w	r2, r3, #12
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <USART_Init+0x100>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d129      	bne.n	8000828 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f043 0220 	orr.w	r2, r3, #32
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f023 0210 	bic.w	r2, r3, #16
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f023 0201 	bic.w	r2, r3, #1
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <USART_Init+0x104>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d10b      	bne.n	8000848 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6a1b      	ldr	r3, [r3, #32]
 8000834:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <USART_Init+0x108>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	4a11      	ldr	r2, [pc, #68]	; (8000888 <USART_Init+0x108>)
 8000842:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000846:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f043 0201 	orr.w	r2, r3, #1
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000854:	bf00      	nop
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0f9      	beq.n	8000856 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000862:	bf00      	nop
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0f9      	beq.n	8000864 <USART_Init+0xe4>
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40004c00 	.word	0x40004c00
 8000884:	40004400 	.word	0x40004400
 8000888:	40013800 	.word	0x40013800

0800088c <USART_Read_NB>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

uint8_t USART_Read_NB(USART_TypeDef * USARTx) {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	if ((USARTx->ISR & USART_ISR_RXNE)){
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	f003 0320 	and.w	r3, r3, #32
 800089c:	2b00      	cmp	r3, #0
 800089e:	d004      	beq.n	80008aa <USART_Read_NB+0x1e>
		return ((uint8_t) (USARTx->RDR & 0xFF)); // action once key pressed occurred
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	e000      	b.n	80008ac <USART_Read_NB+0x20>
	}
	// USART resets the RXNE flag automatically after reading DR
	return 0;
 80008aa:	2300      	movs	r3, #0
	// Reading USART_DR automatically clears the RXNE flag
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	e014      	b.n	80008f4 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80008ca:	bf00      	nop
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d0f9      	beq.n	80008cc <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	4413      	add	r3, r2
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 80008e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008ea:	f000 f819 	bl	8000920 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3301      	adds	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d8e6      	bhi.n	80008ca <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 80008fc:	bf00      	nop
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f9      	beq.n	80008fe <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	61da      	str	r2, [r3, #28]
}   
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2264      	movs	r2, #100	; 0x64
 800092c:	fb02 f203 	mul.w	r2, r2, r3
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <USART_Delay+0x3c>)
 8000932:	fba3 1302 	umull	r1, r3, r3, r2
 8000936:	1ad2      	subs	r2, r2, r3
 8000938:	0852      	lsrs	r2, r2, #1
 800093a:	4413      	add	r3, r2
 800093c:	089b      	lsrs	r3, r3, #2
 800093e:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3b01      	subs	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1f9      	bne.n	8000940 <USART_Delay+0x20>
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	24924925 	.word	0x24924925

08000960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	db0b      	blt.n	800098a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	f003 021f 	and.w	r2, r3, #31
 8000978:	4907      	ldr	r1, [pc, #28]	; (8000998 <__NVIC_EnableIRQ+0x38>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	095b      	lsrs	r3, r3, #5
 8000980:	2001      	movs	r0, #1
 8000982:	fa00 f202 	lsl.w	r2, r0, r2
 8000986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000e100 	.word	0xe000e100

0800099c <Systick_Handler>:
int i = 0;

/**
 * Systick handler for if a second has elapsed
 */
void Systick_Handler(){
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	static uint32_t counter = 0; //counts to 1000
	counter++;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <Systick_Handler+0x30>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <Systick_Handler+0x30>)
 80009a8:	6013      	str	r3, [r2, #0]
	if (counter == 1000){
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <Systick_Handler+0x30>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009b2:	d105      	bne.n	80009c0 <Systick_Handler+0x24>
		one_second_elapsed = 1;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <Systick_Handler+0x34>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
		counter = 0;
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <Systick_Handler+0x30>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]

	}
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000088 	.word	0x20000088
 80009d0:	20000081 	.word	0x20000081

080009d4 <init_systick>:

/**
 * initializes systick
 */
static void init_systick()
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
	// Use the SysTick global structure pointer to do the following in this
	// exact order with separate lines for each step:
	// Disable SysTick by clearing the CTRL (CSR) register.
	SysTick->CTRL = 0;
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <init_systick+0x34>)
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
	// Set the LOAD (RVR) to 80,000 to give us a 1 millisecond timer.
	SysTick->LOAD = 79999;
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <init_systick+0x34>)
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <init_systick+0x38>)
 80009e2:	605a      	str	r2, [r3, #4]
	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	SysTick->CTRL |= 1<<2;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <init_systick+0x34>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <init_systick+0x34>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6013      	str	r3, [r2, #0]
	// Set the enable bit in the CTRL (CSR) to start the timer.
	SysTick->CTRL |= 1;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <init_systick+0x34>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <init_systick+0x34>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6013      	str	r3, [r2, #0]

}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e010 	.word	0xe000e010
 8000a0c:	0001387f 	.word	0x0001387f

08000a10 <delay_systick>:

/**
 * Le internal timer of 1 second
 */
static void delay_systick()
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
	// Using the SysTick global structure pointer do the following:
	//
	// Check for the COUNTFLAG to be set. Return as soon as it is set..
	// This loop for the COUNTFLAG is a blocking call but not for more than 1 millisecond.

	while(!(SysTick->CTRL & (1<<16)))
 8000a14:	bf00      	nop
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <delay_systick+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d0f9      	beq.n	8000a16 <delay_systick+0x6>
		;

}
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e010 	.word	0xe000e010

08000a34 <print>:

/**
 * A useful print function based off of USART write that can only take in strings
 */
static void print(char* message){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	int n ;

	n = sprintf((char *)buffer, message);
 8000a3c:	6879      	ldr	r1, [r7, #4]
 8000a3e:	4809      	ldr	r0, [pc, #36]	; (8000a64 <print+0x30>)
 8000a40:	f000 fdcc 	bl	80015dc <siprintf>
 8000a44:	60f8      	str	r0, [r7, #12]
	USART_Write(USART2, buffer, n);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4906      	ldr	r1, [pc, #24]	; (8000a64 <print+0x30>)
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <print+0x34>)
 8000a4e:	f7ff ff33 	bl	80008b8 <USART_Write>

	delay_systick() ;	// enable this when you are ready to test
 8000a52:	f7ff ffdd 	bl	8000a10 <delay_systick>
	n = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]

}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000009c 	.word	0x2000009c
 8000a68:	40004400 	.word	0x40004400

08000a6c <help>:

/**
 * Prints out the help menu for a user
 */
static void help(){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	print("\n\r***REMOTE LED CONTROL MENU*** \n\r\0");
 8000a70:	480f      	ldr	r0, [pc, #60]	; (8000ab0 <help+0x44>)
 8000a72:	f7ff ffdf 	bl	8000a34 <print>
	print("Proper commands include: \n\r\0");
 8000a76:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <help+0x48>)
 8000a78:	f7ff ffdc 	bl	8000a34 <print>
	print("RON - Turn on RED LED \n\r\0");
 8000a7c:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <help+0x4c>)
 8000a7e:	f7ff ffd9 	bl	8000a34 <print>
	print("ROFF - Turn off RED LED \n\r\0");
 8000a82:	480e      	ldr	r0, [pc, #56]	; (8000abc <help+0x50>)
 8000a84:	f7ff ffd6 	bl	8000a34 <print>
	print("GON - Turn on GREEN LED \n\r\0");
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <help+0x54>)
 8000a8a:	f7ff ffd3 	bl	8000a34 <print>
	print("GOFF - Turn off GREEN LED \n\r\0");
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <help+0x58>)
 8000a90:	f7ff ffd0 	bl	8000a34 <print>
	print("RFLASH - Start flashing RED LED \n\r\0");
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <help+0x5c>)
 8000a96:	f7ff ffcd 	bl	8000a34 <print>
	print("GFLASH - Start flashing GREEN LED \n\r\0");
 8000a9a:	480c      	ldr	r0, [pc, #48]	; (8000acc <help+0x60>)
 8000a9c:	f7ff ffca 	bl	8000a34 <print>
	print("ALLOFF - TURNOFF LEDs \n\r\0");
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <help+0x64>)
 8000aa2:	f7ff ffc7 	bl	8000a34 <print>
	print("HELP - Shows valid commands \n\r\0");
 8000aa6:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <help+0x68>)
 8000aa8:	f7ff ffc4 	bl	8000a34 <print>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	08002760 	.word	0x08002760
 8000ab4:	08002784 	.word	0x08002784
 8000ab8:	080027a4 	.word	0x080027a4
 8000abc:	080027c0 	.word	0x080027c0
 8000ac0:	080027dc 	.word	0x080027dc
 8000ac4:	080027f8 	.word	0x080027f8
 8000ac8:	08002818 	.word	0x08002818
 8000acc:	0800283c 	.word	0x0800283c
 8000ad0:	08002864 	.word	0x08002864
 8000ad4:	08002880 	.word	0x08002880

08000ad8 <user_input>:

/**
 * In remote mode takes in user input and does the appropriate action
 * With a series of if-else statements that checks the users input against proper commands
 */
static void user_input(){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	if (!strcmp((char *)action, "HELP")){
 8000adc:	492c      	ldr	r1, [pc, #176]	; (8000b90 <user_input+0xb8>)
 8000ade:	482d      	ldr	r0, [pc, #180]	; (8000b94 <user_input+0xbc>)
 8000ae0:	f7ff fb76 	bl	80001d0 <strcmp>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <user_input+0x18>
		help();
 8000aea:	f7ff ffbf 	bl	8000a6c <help>
	}

	else{
		print("\n\rInvalid command. Please input a proper command\n\r\0");
	}
}
 8000aee:	e04c      	b.n	8000b8a <user_input+0xb2>
	else if (!strcmp((char *)action, "RON")){
 8000af0:	4929      	ldr	r1, [pc, #164]	; (8000b98 <user_input+0xc0>)
 8000af2:	4828      	ldr	r0, [pc, #160]	; (8000b94 <user_input+0xbc>)
 8000af4:	f7ff fb6c 	bl	80001d0 <strcmp>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <user_input+0x2c>
		RLED_On();
 8000afe:	f7ff fc74 	bl	80003ea <RLED_On>
}
 8000b02:	e042      	b.n	8000b8a <user_input+0xb2>
	else if (!strcmp((char *)action, "ROFF")){
 8000b04:	4925      	ldr	r1, [pc, #148]	; (8000b9c <user_input+0xc4>)
 8000b06:	4823      	ldr	r0, [pc, #140]	; (8000b94 <user_input+0xbc>)
 8000b08:	f7ff fb62 	bl	80001d0 <strcmp>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <user_input+0x40>
		RLED_Off();
 8000b12:	f7ff fcaf 	bl	8000474 <RLED_Off>
}
 8000b16:	e038      	b.n	8000b8a <user_input+0xb2>
	else if (!strcmp((char *)action, "GON")){
 8000b18:	4921      	ldr	r1, [pc, #132]	; (8000ba0 <user_input+0xc8>)
 8000b1a:	481e      	ldr	r0, [pc, #120]	; (8000b94 <user_input+0xbc>)
 8000b1c:	f7ff fb58 	bl	80001d0 <strcmp>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <user_input+0x54>
		GLED_On();
 8000b26:	f7ff fc51 	bl	80003cc <GLED_On>
}
 8000b2a:	e02e      	b.n	8000b8a <user_input+0xb2>
	else if (!strcmp((char *)action, "GOFF")){
 8000b2c:	491d      	ldr	r1, [pc, #116]	; (8000ba4 <user_input+0xcc>)
 8000b2e:	4819      	ldr	r0, [pc, #100]	; (8000b94 <user_input+0xbc>)
 8000b30:	f7ff fb4e 	bl	80001d0 <strcmp>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <user_input+0x68>
		GLED_Off();
 8000b3a:	f7ff fc8c 	bl	8000456 <GLED_Off>
}
 8000b3e:	e024      	b.n	8000b8a <user_input+0xb2>
	else if (!strcmp((char *)action, "RFLASH")){
 8000b40:	4919      	ldr	r1, [pc, #100]	; (8000ba8 <user_input+0xd0>)
 8000b42:	4814      	ldr	r0, [pc, #80]	; (8000b94 <user_input+0xbc>)
 8000b44:	f7ff fb44 	bl	80001d0 <strcmp>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d102      	bne.n	8000b54 <user_input+0x7c>
		RLED_Toggle();
 8000b4e:	f7ff fcaf 	bl	80004b0 <RLED_Toggle>
}
 8000b52:	e01a      	b.n	8000b8a <user_input+0xb2>
	else if (!strcmp((char *)action, "GFLASH")){
 8000b54:	4915      	ldr	r1, [pc, #84]	; (8000bac <user_input+0xd4>)
 8000b56:	480f      	ldr	r0, [pc, #60]	; (8000b94 <user_input+0xbc>)
 8000b58:	f7ff fb3a 	bl	80001d0 <strcmp>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d106      	bne.n	8000b70 <user_input+0x98>
		if (one_second_elapsed){
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <user_input+0xd8>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00f      	beq.n	8000b8a <user_input+0xb2>
			GLED_Toggle();
 8000b6a:	f7ff fc92 	bl	8000492 <GLED_Toggle>
}
 8000b6e:	e00c      	b.n	8000b8a <user_input+0xb2>
	else if (!strcmp((char *)action, "ALLOFF")){
 8000b70:	4910      	ldr	r1, [pc, #64]	; (8000bb4 <user_input+0xdc>)
 8000b72:	4808      	ldr	r0, [pc, #32]	; (8000b94 <user_input+0xbc>)
 8000b74:	f7ff fb2c 	bl	80001d0 <strcmp>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d102      	bne.n	8000b84 <user_input+0xac>
		LED_Off();
 8000b7e:	f7ff fc43 	bl	8000408 <LED_Off>
}
 8000b82:	e002      	b.n	8000b8a <user_input+0xb2>
		print("\n\rInvalid command. Please input a proper command\n\r\0");
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <user_input+0xe0>)
 8000b86:	f7ff ff55 	bl	8000a34 <print>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	080028a0 	.word	0x080028a0
 8000b94:	200000bc 	.word	0x200000bc
 8000b98:	080028a8 	.word	0x080028a8
 8000b9c:	080028ac 	.word	0x080028ac
 8000ba0:	080028b4 	.word	0x080028b4
 8000ba4:	080028b8 	.word	0x080028b8
 8000ba8:	080028c0 	.word	0x080028c0
 8000bac:	080028c8 	.word	0x080028c8
 8000bb0:	20000081 	.word	0x20000081
 8000bb4:	080028d0 	.word	0x080028d0
 8000bb8:	080028d8 	.word	0x080028d8

08000bbc <USART2_IRQHandler>:
/**
 * The proper usart handler function thats non blocking although it
 * reads the variable action as improper all the time so...
 * you win some you lose some
 */
void USART2_IRQHandler(){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	one_char = USART_Read_NB( USART2 );
 8000bc0:	481f      	ldr	r0, [pc, #124]	; (8000c40 <USART2_IRQHandler+0x84>)
 8000bc2:	f7ff fe63 	bl	800088c <USART_Read_NB>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <USART2_IRQHandler+0x88>)
 8000bcc:	701a      	strb	r2, [r3, #0]
	USART_Write(USART2, &one_char, 1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	491c      	ldr	r1, [pc, #112]	; (8000c44 <USART2_IRQHandler+0x88>)
 8000bd2:	481b      	ldr	r0, [pc, #108]	; (8000c40 <USART2_IRQHandler+0x84>)
 8000bd4:	f7ff fe70 	bl	80008b8 <USART_Write>
	if(one_char == '\r' || one_char == '\n'){
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <USART2_IRQHandler+0x88>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b0d      	cmp	r3, #13
 8000bde:	d003      	beq.n	8000be8 <USART2_IRQHandler+0x2c>
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <USART2_IRQHandler+0x88>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b0a      	cmp	r3, #10
 8000be6:	d11c      	bne.n	8000c22 <USART2_IRQHandler+0x66>
		one_char = '\n';
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <USART2_IRQHandler+0x88>)
 8000bea:	220a      	movs	r2, #10
 8000bec:	701a      	strb	r2, [r3, #0]
		action[i] = one_char;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <USART2_IRQHandler+0x8c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <USART2_IRQHandler+0x88>)
 8000bf4:	7811      	ldrb	r1, [r2, #0]
 8000bf6:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <USART2_IRQHandler+0x90>)
 8000bf8:	54d1      	strb	r1, [r2, r3]
		action [i + 1] = '\0';
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <USART2_IRQHandler+0x8c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <USART2_IRQHandler+0x90>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	54d1      	strb	r1, [r2, r3]
		user_input();
 8000c06:	f7ff ff67 	bl	8000ad8 <user_input>
		action[0] = 0;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <USART2_IRQHandler+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
		i = 0;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <USART2_IRQHandler+0x8c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
		USART_Write(USART2, &one_char, 1);
 8000c16:	2201      	movs	r2, #1
 8000c18:	490a      	ldr	r1, [pc, #40]	; (8000c44 <USART2_IRQHandler+0x88>)
 8000c1a:	4809      	ldr	r0, [pc, #36]	; (8000c40 <USART2_IRQHandler+0x84>)
 8000c1c:	f7ff fe4c 	bl	80008b8 <USART_Write>
 8000c20:	e00b      	b.n	8000c3a <USART2_IRQHandler+0x7e>

	}
	else{
		action[i] = one_char;
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <USART2_IRQHandler+0x8c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <USART2_IRQHandler+0x88>)
 8000c28:	7811      	ldrb	r1, [r2, #0]
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <USART2_IRQHandler+0x90>)
 8000c2c:	54d1      	strb	r1, [r2, r3]
		i++;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <USART2_IRQHandler+0x8c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <USART2_IRQHandler+0x8c>)
 8000c36:	6013      	str	r3, [r2, #0]
	}
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40004400 	.word	0x40004400
 8000c44:	20000080 	.word	0x20000080
 8000c48:	20000084 	.word	0x20000084
 8000c4c:	200000bc 	.word	0x200000bc

08000c50 <run_demo>:
/**
 * RUN DEMO!!! Does everything from calling inits to starting and
 * keeping the magic going
 */
void run_demo()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	init_systick();
 8000c54:	f7ff febe 	bl	80009d4 <init_systick>
	//USART2->CR1 |= 1<<5; //enables RXNE
	NVIC_EnableIRQ(USART2_IRQn);
 8000c58:	2026      	movs	r0, #38	; 0x26
 8000c5a:	f7ff fe81 	bl	8000960 <__NVIC_EnableIRQ>

	print("\n\r***REMOTE MODE ACTIVE*** \n\r\0");
 8000c5e:	480b      	ldr	r0, [pc, #44]	; (8000c8c <run_demo+0x3c>)
 8000c60:	f7ff fee8 	bl	8000a34 <print>
	while(1){

		while(EXTI15_10_IRQnHandler()){
 8000c64:	e007      	b.n	8000c76 <run_demo+0x26>
			BLED_Toggle(); //actually a hilarious line because this dims the led when the blue button is pressed, makes it go bright and then eventually will go off. Dk why
 8000c66:	f7ff fc32 	bl	80004ce <BLED_Toggle>
			EXTI15_IRQnHandler();
 8000c6a:	f000 f8d1 	bl	8000e10 <EXTI15_IRQnHandler>
			EXTI9_IRQnHandler();
 8000c6e:	f000 f8bb 	bl	8000de8 <EXTI9_IRQnHandler>
			delay_systick();
 8000c72:	f7ff fecd 	bl	8000a10 <delay_systick>
		while(EXTI15_10_IRQnHandler()){
 8000c76:	f000 f879 	bl	8000d6c <EXTI15_10_IRQnHandler>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1f2      	bne.n	8000c66 <run_demo+0x16>
		}
		USART2_IRQHandler();
 8000c80:	f7ff ff9c 	bl	8000bbc <USART2_IRQHandler>
		Systick_Handler();
 8000c84:	f7ff fe8a 	bl	800099c <Systick_Handler>
		while(EXTI15_10_IRQnHandler()){
 8000c88:	e7f5      	b.n	8000c76 <run_demo+0x26>
 8000c8a:	bf00      	nop
 8000c8c:	08002910 	.word	0x08002910

08000c90 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <GPIO_Init+0xd4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a2e      	ldr	r2, [pc, #184]	; (8000d64 <GPIO_Init+0xd4>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <GPIO_Init+0xd4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <GPIO_Init+0xd4>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <GPIO_Init+0xd4>)
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <GPIO_Init+0xd4>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <GPIO_Init+0xd4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a22      	ldr	r2, [pc, #136]	; (8000d64 <GPIO_Init+0xd4>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <GPIO_Init+0xd4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <GPIO_Init+0xd4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <GPIO_Init+0xd4>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <GPIO_Init+0xd4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d0c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d10:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4812      	ldr	r0, [pc, #72]	; (8000d68 <GPIO_Init+0xd8>)
 8000d1e:	f000 f9d3 	bl	80010c8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = R1_Pin;
 8000d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d26:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d28:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d2c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3c:	f000 f9c4 	bl	80010c8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = G1_Pin;
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d44:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d48:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(G1_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <GPIO_Init+0xd8>)
 8000d56:	f000 f9b7 	bl	80010c8 <HAL_GPIO_Init>
	// This is the interrupt handler for the blue button

	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the "Red" and "Green" buttons (R1 and G1)
}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000800 	.word	0x48000800

08000d6c <EXTI15_10_IRQnHandler>:

/**
 * Handler for manual mode,
 */
int EXTI15_10_IRQnHandler(void){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != 0x00u) //Checks if its flagged
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <EXTI15_10_IRQnHandler+0x6c>)
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d028      	beq.n	8000dce <EXTI15_10_IRQnHandler+0x62>
	  {
		if (STATE == 0){ //checks if It is in remote mode
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <EXTI15_10_IRQnHandler+0x70>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d112      	bne.n	8000daa <EXTI15_10_IRQnHandler+0x3e>
			STATE = 1;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <EXTI15_10_IRQnHandler+0x70>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]
			printf("\n\r***MANUAL OVERRIDE MODE ACTIVE*** \n\r");
 8000d8a:	4815      	ldr	r0, [pc, #84]	; (8000de0 <EXTI15_10_IRQnHandler+0x74>)
 8000d8c:	f000 f862 	bl	8000e54 <printf>
			WLED_Toggle();
			for (i = 0; i == 79999; i++);
			BLED_Toggle();
			WLED_Toggle();*/

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <EXTI15_10_IRQnHandler+0x6c>)
 8000d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d96:	615a      	str	r2, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_13);
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <EXTI15_10_IRQnHandler+0x6c>)
 8000d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9e:	615a      	str	r2, [r3, #20]
			HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8000da0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000da4:	f000 fb3a 	bl	800141c <HAL_GPIO_EXTI_Callback>
 8000da8:	e011      	b.n	8000dce <EXTI15_10_IRQnHandler+0x62>
		}
		else{ //functionality when already in manual mode
			STATE = 0;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <EXTI15_10_IRQnHandler+0x70>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <EXTI15_10_IRQnHandler+0x6c>)
 8000db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db6:	615a      	str	r2, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_13);
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <EXTI15_10_IRQnHandler+0x6c>)
 8000dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dbe:	615a      	str	r2, [r3, #20]
			HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8000dc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dc4:	f000 fb2a 	bl	800141c <HAL_GPIO_EXTI_Callback>
			printf("\n\r***REMOTE MODE ACTIVE*** \n\r");
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <EXTI15_10_IRQnHandler+0x78>)
 8000dca:	f000 f843 	bl	8000e54 <printf>
		}
	  }
	return STATE;
 8000dce:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <EXTI15_10_IRQnHandler+0x70>)
 8000dd0:	681b      	ldr	r3, [r3, #0]

}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40010400 	.word	0x40010400
 8000ddc:	2000008c 	.word	0x2000008c
 8000de0:	08002930 	.word	0x08002930
 8000de4:	08002958 	.word	0x08002958

08000de8 <EXTI9_IRQnHandler>:
/**
 * Handler for the switch that controls the blue led (Ideally)
 */
void EXTI9_IRQnHandler(void){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != 0x00u)
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <EXTI9_IRQnHandler+0x24>)
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d007      	beq.n	8000e08 <EXTI9_IRQnHandler+0x20>
		  {
		    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <EXTI9_IRQnHandler+0x24>)
 8000dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfe:	615a      	str	r2, [r3, #20]
		    HAL_GPIO_EXTI_Callback(GPIO_PIN_9);
 8000e00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e04:	f000 fb0a 	bl	800141c <HAL_GPIO_EXTI_Callback>
		  }
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40010400 	.word	0x40010400

08000e10 <EXTI15_IRQnHandler>:

/**
 * Handler for the switch that controls the blue led (Ideally)
 */
void EXTI15_IRQnHandler(void){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != 0x00u)
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <EXTI15_IRQnHandler+0x20>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d005      	beq.n	8000e2c <EXTI15_IRQnHandler+0x1c>
		  {
		    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <EXTI15_IRQnHandler+0x20>)
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	615a      	str	r2, [r3, #20]
		    HAL_GPIO_EXTI_Callback(GPIO_PIN_7);
 8000e26:	2080      	movs	r0, #128	; 0x80
 8000e28:	f000 faf8 	bl	800141c <HAL_GPIO_EXTI_Callback>
		  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40010400 	.word	0x40010400

08000e34 <main>:
#include "UART.h"
#include "demo.h"
#include "hello_world.h"
#include "gpio.h"
	
int main(void){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8000e38:	f7ff fb58 	bl	80004ec <System_Clock_Init>
	LED_Init();
 8000e3c:	f7ff faae 	bl	800039c <LED_Init>
	UART2_Init(); //functions to use: USART_Read
 8000e40:	f7ff fc32 	bl	80006a8 <UART2_Init>
				  //                  USART_Write
	GPIO_Init();
 8000e44:	f7ff ff24 	bl	8000c90 <GPIO_Init>
	
	// application run function
	run_demo() ;
 8000e48:	f7ff ff02 	bl	8000c50 <run_demo>
 8000e4c:	2300      	movs	r3, #0
	//hello_world();
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <printf>:

#include <stdarg.h>
#include <stdio.h>
#include "stm32l476xx.h"

int printf (const char* format, ...) {
 8000e54:	b40f      	push	{r0, r1, r2, r3}
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b0c4      	sub	sp, #272	; 0x110
 8000e5a:	af00      	add	r7, sp, #0
    char buffer [256];
    int len = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    va_list args;
    va_start (args, format);
 8000e62:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	601a      	str	r2, [r3, #0]
    len = vsprintf (buffer, format, args);
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	f107 0008 	add.w	r0, r7, #8
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000e76:	f000 fdcf 	bl	8001a18 <vsiprintf>
 8000e7a:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    perror (buffer);
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fba2 	bl	80015cc <perror>
    va_end (args);

    for (int i = 0; i < len; i++) {
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000e8e:	e014      	b.n	8000eba <printf+0x66>
        while (!(USART2->ISR & USART_ISR_TXE));       // wait until TXE (TX empty) bit is set
 8000e90:	bf00      	nop
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <printf+0xa0>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f9      	beq.n	8000e92 <printf+0x3e>
        // Writing USART_DR automatically clears the TXE flag
        USART2->TDR = buffer[i] & 0xFF;
 8000e9e:	f107 0208 	add.w	r2, r7, #8
 8000ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <printf+0xa0>)
 8000eac:	b292      	uxth	r2, r2
 8000eae:	851a      	strh	r2, [r3, #40]	; 0x28
    for (int i = 0; i < len; i++) {
 8000eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000eba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000ebe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	dbe4      	blt.n	8000e90 <printf+0x3c>
    }
    while (!(USART2->ISR & USART_ISR_TC));             // wait until TC bit is set
 8000ec6:	bf00      	nop
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <printf+0xa0>)
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f9      	beq.n	8000ec8 <printf+0x74>
    USART2->ISR &= ~USART_ISR_TC;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <printf+0xa0>)
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <printf+0xa0>)
 8000eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ede:	61d3      	str	r3, [r2, #28]

    return len;
 8000ee0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000eea:	46bd      	mov	sp, r7
 8000eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ef0:	b004      	add	sp, #16
 8000ef2:	4770      	bx	lr
 8000ef4:	40004400 	.word	0x40004400

08000ef8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e00a      	b.n	8000f20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f0a:	f3af 8000 	nop.w
 8000f0e:	4601      	mov	r1, r0
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbf0      	blt.n	8000f0a <_read+0x12>
	}

return len;
 8000f28:	687b      	ldr	r3, [r7, #4]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e009      	b.n	8000f58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbf1      	blt.n	8000f44 <_write+0x12>
	}
	return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_close>:

int _close(int file)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
	return -1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
	return 0;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <_sbrk+0x5c>)
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <_sbrk+0x60>)
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <_sbrk+0x64>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <_sbrk+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d207      	bcs.n	8000fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fcc:	f000 fa32 	bl	8001434 <__errno>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	e009      	b.n	8000ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <_sbrk+0x64>)
 8000fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20018000 	.word	0x20018000
 8000ffc:	00000400 	.word	0x00000400
 8001000:	20000090 	.word	0x20000090
 8001004:	200000e0 	.word	0x200000e0

08001008 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <SystemInit+0x64>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001012:	4a16      	ldr	r2, [pc, #88]	; (800106c <SystemInit+0x64>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <SystemInit+0x68>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a13      	ldr	r2, [pc, #76]	; (8001070 <SystemInit+0x68>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <SystemInit+0x68>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <SystemInit+0x68>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <SystemInit+0x68>)
 8001034:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001038:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800103c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <SystemInit+0x68>)
 8001040:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001044:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <SystemInit+0x68>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <SystemInit+0x68>)
 800104c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001050:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <SystemInit+0x68>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <SystemInit+0x64>)
 800105a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800105e:	609a      	str	r2, [r3, #8]
#endif
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	40021000 	.word	0x40021000

08001074 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001078:	f7ff ffc6 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800107e:	490d      	ldr	r1, [pc, #52]	; (80010b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <LoopForever+0xe>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001094:	4c0a      	ldr	r4, [pc, #40]	; (80010c0 <LoopForever+0x16>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f000 f9cd 	bl	8001440 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010a6:	f7ff fec5 	bl	8000e34 <main>

080010aa <LoopForever>:

LoopForever:
    b LoopForever
 80010aa:	e7fe      	b.n	80010aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80010b8:	080030b4 	.word	0x080030b4
  ldr r2, =_sbss
 80010bc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80010c0:	200000dc 	.word	0x200000dc

080010c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC1_2_IRQHandler>
	...

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d6:	e17f      	b.n	80013d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	4013      	ands	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8171 	beq.w	80013d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d005      	beq.n	8001108 <HAL_GPIO_Init+0x40>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d130      	bne.n	800116a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800113e:	2201      	movs	r2, #1
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f003 0201 	and.w	r2, r3, #1
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b03      	cmp	r3, #3
 8001174:	d118      	bne.n	80011a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	08db      	lsrs	r3, r3, #3
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d017      	beq.n	80011e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d123      	bne.n	8001238 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	6939      	ldr	r1, [r7, #16]
 8001234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0203 	and.w	r2, r3, #3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80ac 	beq.w	80013d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b5f      	ldr	r3, [pc, #380]	; (80013f8 <HAL_GPIO_Init+0x330>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	4a5e      	ldr	r2, [pc, #376]	; (80013f8 <HAL_GPIO_Init+0x330>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6613      	str	r3, [r2, #96]	; 0x60
 8001286:	4b5c      	ldr	r3, [pc, #368]	; (80013f8 <HAL_GPIO_Init+0x330>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001292:	4a5a      	ldr	r2, [pc, #360]	; (80013fc <HAL_GPIO_Init+0x334>)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012bc:	d025      	beq.n	800130a <HAL_GPIO_Init+0x242>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4f      	ldr	r2, [pc, #316]	; (8001400 <HAL_GPIO_Init+0x338>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01f      	beq.n	8001306 <HAL_GPIO_Init+0x23e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4e      	ldr	r2, [pc, #312]	; (8001404 <HAL_GPIO_Init+0x33c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d019      	beq.n	8001302 <HAL_GPIO_Init+0x23a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4d      	ldr	r2, [pc, #308]	; (8001408 <HAL_GPIO_Init+0x340>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0x236>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4c      	ldr	r2, [pc, #304]	; (800140c <HAL_GPIO_Init+0x344>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00d      	beq.n	80012fa <HAL_GPIO_Init+0x232>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4b      	ldr	r2, [pc, #300]	; (8001410 <HAL_GPIO_Init+0x348>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d007      	beq.n	80012f6 <HAL_GPIO_Init+0x22e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4a      	ldr	r2, [pc, #296]	; (8001414 <HAL_GPIO_Init+0x34c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_GPIO_Init+0x22a>
 80012ee:	2306      	movs	r3, #6
 80012f0:	e00c      	b.n	800130c <HAL_GPIO_Init+0x244>
 80012f2:	2307      	movs	r3, #7
 80012f4:	e00a      	b.n	800130c <HAL_GPIO_Init+0x244>
 80012f6:	2305      	movs	r3, #5
 80012f8:	e008      	b.n	800130c <HAL_GPIO_Init+0x244>
 80012fa:	2304      	movs	r3, #4
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x244>
 80012fe:	2303      	movs	r3, #3
 8001300:	e004      	b.n	800130c <HAL_GPIO_Init+0x244>
 8001302:	2302      	movs	r3, #2
 8001304:	e002      	b.n	800130c <HAL_GPIO_Init+0x244>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_GPIO_Init+0x244>
 800130a:	2300      	movs	r3, #0
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	f002 0203 	and.w	r2, r2, #3
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	4093      	lsls	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800131c:	4937      	ldr	r1, [pc, #220]	; (80013fc <HAL_GPIO_Init+0x334>)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_GPIO_Init+0x350>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800134e:	4a32      	ldr	r2, [pc, #200]	; (8001418 <HAL_GPIO_Init+0x350>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HAL_GPIO_Init+0x350>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001378:	4a27      	ldr	r2, [pc, #156]	; (8001418 <HAL_GPIO_Init+0x350>)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <HAL_GPIO_Init+0x350>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a2:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <HAL_GPIO_Init+0x350>)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_GPIO_Init+0x350>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <HAL_GPIO_Init+0x350>)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa22 f303 	lsr.w	r3, r2, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f47f ae78 	bne.w	80010d8 <HAL_GPIO_Init+0x10>
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000
 8001400:	48000400 	.word	0x48000400
 8001404:	48000800 	.word	0x48000800
 8001408:	48000c00 	.word	0x48000c00
 800140c:	48001000 	.word	0x48001000
 8001410:	48001400 	.word	0x48001400
 8001414:	48001800 	.word	0x48001800
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <__errno>:
 8001434:	4b01      	ldr	r3, [pc, #4]	; (800143c <__errno+0x8>)
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000

08001440 <__libc_init_array>:
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	4d0d      	ldr	r5, [pc, #52]	; (8001478 <__libc_init_array+0x38>)
 8001444:	4c0d      	ldr	r4, [pc, #52]	; (800147c <__libc_init_array+0x3c>)
 8001446:	1b64      	subs	r4, r4, r5
 8001448:	10a4      	asrs	r4, r4, #2
 800144a:	2600      	movs	r6, #0
 800144c:	42a6      	cmp	r6, r4
 800144e:	d109      	bne.n	8001464 <__libc_init_array+0x24>
 8001450:	4d0b      	ldr	r5, [pc, #44]	; (8001480 <__libc_init_array+0x40>)
 8001452:	4c0c      	ldr	r4, [pc, #48]	; (8001484 <__libc_init_array+0x44>)
 8001454:	f001 f978 	bl	8002748 <_init>
 8001458:	1b64      	subs	r4, r4, r5
 800145a:	10a4      	asrs	r4, r4, #2
 800145c:	2600      	movs	r6, #0
 800145e:	42a6      	cmp	r6, r4
 8001460:	d105      	bne.n	800146e <__libc_init_array+0x2e>
 8001462:	bd70      	pop	{r4, r5, r6, pc}
 8001464:	f855 3b04 	ldr.w	r3, [r5], #4
 8001468:	4798      	blx	r3
 800146a:	3601      	adds	r6, #1
 800146c:	e7ee      	b.n	800144c <__libc_init_array+0xc>
 800146e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001472:	4798      	blx	r3
 8001474:	3601      	adds	r6, #1
 8001476:	e7f2      	b.n	800145e <__libc_init_array+0x1e>
 8001478:	080030ac 	.word	0x080030ac
 800147c:	080030ac 	.word	0x080030ac
 8001480:	080030ac 	.word	0x080030ac
 8001484:	080030b0 	.word	0x080030b0

08001488 <memset>:
 8001488:	4402      	add	r2, r0
 800148a:	4603      	mov	r3, r0
 800148c:	4293      	cmp	r3, r2
 800148e:	d100      	bne.n	8001492 <memset+0xa>
 8001490:	4770      	bx	lr
 8001492:	f803 1b01 	strb.w	r1, [r3], #1
 8001496:	e7f9      	b.n	800148c <memset+0x4>

08001498 <_perror_r>:
 8001498:	6983      	ldr	r3, [r0, #24]
 800149a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800149c:	68c4      	ldr	r4, [r0, #12]
 800149e:	4605      	mov	r5, r0
 80014a0:	460e      	mov	r6, r1
 80014a2:	b90b      	cbnz	r3, 80014a8 <_perror_r+0x10>
 80014a4:	f000 fc2c 	bl	8001d00 <__sinit>
 80014a8:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <_perror_r+0x120>)
 80014aa:	429c      	cmp	r4, r3
 80014ac:	d132      	bne.n	8001514 <_perror_r+0x7c>
 80014ae:	686c      	ldr	r4, [r5, #4]
 80014b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014b2:	07d8      	lsls	r0, r3, #31
 80014b4:	d405      	bmi.n	80014c2 <_perror_r+0x2a>
 80014b6:	89a3      	ldrh	r3, [r4, #12]
 80014b8:	0599      	lsls	r1, r3, #22
 80014ba:	d402      	bmi.n	80014c2 <_perror_r+0x2a>
 80014bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014be:	f000 fcbd 	bl	8001e3c <__retarget_lock_acquire_recursive>
 80014c2:	4621      	mov	r1, r4
 80014c4:	4628      	mov	r0, r5
 80014c6:	f000 fb49 	bl	8001b5c <_fflush_r>
 80014ca:	bb6e      	cbnz	r6, 8001528 <_perror_r+0x90>
 80014cc:	6829      	ldr	r1, [r5, #0]
 80014ce:	ab01      	add	r3, sp, #4
 80014d0:	2201      	movs	r2, #1
 80014d2:	4628      	mov	r0, r5
 80014d4:	f000 f8a2 	bl	800161c <_strerror_r>
 80014d8:	4607      	mov	r7, r0
 80014da:	2800      	cmp	r0, #0
 80014dc:	d14f      	bne.n	800157e <_perror_r+0xe6>
 80014de:	4837      	ldr	r0, [pc, #220]	; (80015bc <_perror_r+0x124>)
 80014e0:	4f36      	ldr	r7, [pc, #216]	; (80015bc <_perror_r+0x124>)
 80014e2:	f7fe fe7f 	bl	80001e4 <strlen>
 80014e6:	4606      	mov	r6, r0
 80014e8:	b156      	cbz	r6, 8001500 <_perror_r+0x68>
 80014ea:	4620      	mov	r0, r4
 80014ec:	f000 fb72 	bl	8001bd4 <fileno>
 80014f0:	4633      	mov	r3, r6
 80014f2:	4601      	mov	r1, r0
 80014f4:	463a      	mov	r2, r7
 80014f6:	4628      	mov	r0, r5
 80014f8:	f000 fa98 	bl	8001a2c <_write_r>
 80014fc:	2800      	cmp	r0, #0
 80014fe:	da51      	bge.n	80015a4 <_perror_r+0x10c>
 8001500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001504:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800150a:	07d2      	lsls	r2, r2, #31
 800150c:	81a3      	strh	r3, [r4, #12]
 800150e:	d54c      	bpl.n	80015aa <_perror_r+0x112>
 8001510:	b003      	add	sp, #12
 8001512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <_perror_r+0x128>)
 8001516:	429c      	cmp	r4, r3
 8001518:	d101      	bne.n	800151e <_perror_r+0x86>
 800151a:	68ac      	ldr	r4, [r5, #8]
 800151c:	e7c8      	b.n	80014b0 <_perror_r+0x18>
 800151e:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <_perror_r+0x12c>)
 8001520:	429c      	cmp	r4, r3
 8001522:	bf08      	it	eq
 8001524:	68ec      	ldreq	r4, [r5, #12]
 8001526:	e7c3      	b.n	80014b0 <_perror_r+0x18>
 8001528:	7833      	ldrb	r3, [r6, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0ce      	beq.n	80014cc <_perror_r+0x34>
 800152e:	4630      	mov	r0, r6
 8001530:	f7fe fe58 	bl	80001e4 <strlen>
 8001534:	4607      	mov	r7, r0
 8001536:	b157      	cbz	r7, 800154e <_perror_r+0xb6>
 8001538:	4620      	mov	r0, r4
 800153a:	f000 fb4b 	bl	8001bd4 <fileno>
 800153e:	463b      	mov	r3, r7
 8001540:	4601      	mov	r1, r0
 8001542:	4632      	mov	r2, r6
 8001544:	4628      	mov	r0, r5
 8001546:	f000 fa71 	bl	8001a2c <_write_r>
 800154a:	2800      	cmp	r0, #0
 800154c:	da14      	bge.n	8001578 <_perror_r+0xe0>
 800154e:	481e      	ldr	r0, [pc, #120]	; (80015c8 <_perror_r+0x130>)
 8001550:	4f1d      	ldr	r7, [pc, #116]	; (80015c8 <_perror_r+0x130>)
 8001552:	f7fe fe47 	bl	80001e4 <strlen>
 8001556:	4606      	mov	r6, r0
 8001558:	2e00      	cmp	r6, #0
 800155a:	d0b7      	beq.n	80014cc <_perror_r+0x34>
 800155c:	4620      	mov	r0, r4
 800155e:	f000 fb39 	bl	8001bd4 <fileno>
 8001562:	4633      	mov	r3, r6
 8001564:	4601      	mov	r1, r0
 8001566:	463a      	mov	r2, r7
 8001568:	4628      	mov	r0, r5
 800156a:	f000 fa5f 	bl	8001a2c <_write_r>
 800156e:	2800      	cmp	r0, #0
 8001570:	dbac      	blt.n	80014cc <_perror_r+0x34>
 8001572:	1a36      	subs	r6, r6, r0
 8001574:	4407      	add	r7, r0
 8001576:	e7ef      	b.n	8001558 <_perror_r+0xc0>
 8001578:	1a3f      	subs	r7, r7, r0
 800157a:	4406      	add	r6, r0
 800157c:	e7db      	b.n	8001536 <_perror_r+0x9e>
 800157e:	f7fe fe31 	bl	80001e4 <strlen>
 8001582:	4606      	mov	r6, r0
 8001584:	2e00      	cmp	r6, #0
 8001586:	d0aa      	beq.n	80014de <_perror_r+0x46>
 8001588:	4620      	mov	r0, r4
 800158a:	f000 fb23 	bl	8001bd4 <fileno>
 800158e:	4633      	mov	r3, r6
 8001590:	4601      	mov	r1, r0
 8001592:	463a      	mov	r2, r7
 8001594:	4628      	mov	r0, r5
 8001596:	f000 fa49 	bl	8001a2c <_write_r>
 800159a:	2800      	cmp	r0, #0
 800159c:	db9f      	blt.n	80014de <_perror_r+0x46>
 800159e:	1a36      	subs	r6, r6, r0
 80015a0:	4407      	add	r7, r0
 80015a2:	e7ef      	b.n	8001584 <_perror_r+0xec>
 80015a4:	1a36      	subs	r6, r6, r0
 80015a6:	4407      	add	r7, r0
 80015a8:	e79e      	b.n	80014e8 <_perror_r+0x50>
 80015aa:	059b      	lsls	r3, r3, #22
 80015ac:	d4b0      	bmi.n	8001510 <_perror_r+0x78>
 80015ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015b0:	f000 fc45 	bl	8001e3e <__retarget_lock_release_recursive>
 80015b4:	e7ac      	b.n	8001510 <_perror_r+0x78>
 80015b6:	bf00      	nop
 80015b8:	08003038 	.word	0x08003038
 80015bc:	0800297f 	.word	0x0800297f
 80015c0:	08003058 	.word	0x08003058
 80015c4:	08003018 	.word	0x08003018
 80015c8:	0800297c 	.word	0x0800297c

080015cc <perror>:
 80015cc:	4b02      	ldr	r3, [pc, #8]	; (80015d8 <perror+0xc>)
 80015ce:	4601      	mov	r1, r0
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	f7ff bf61 	b.w	8001498 <_perror_r>
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000

080015dc <siprintf>:
 80015dc:	b40e      	push	{r1, r2, r3}
 80015de:	b500      	push	{lr}
 80015e0:	b09c      	sub	sp, #112	; 0x70
 80015e2:	ab1d      	add	r3, sp, #116	; 0x74
 80015e4:	9002      	str	r0, [sp, #8]
 80015e6:	9006      	str	r0, [sp, #24]
 80015e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <siprintf+0x38>)
 80015ee:	9107      	str	r1, [sp, #28]
 80015f0:	9104      	str	r1, [sp, #16]
 80015f2:	4909      	ldr	r1, [pc, #36]	; (8001618 <siprintf+0x3c>)
 80015f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80015f8:	9105      	str	r1, [sp, #20]
 80015fa:	6800      	ldr	r0, [r0, #0]
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	a902      	add	r1, sp, #8
 8001600:	f000 fd24 	bl	800204c <_svfiprintf_r>
 8001604:	9b02      	ldr	r3, [sp, #8]
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	b01c      	add	sp, #112	; 0x70
 800160c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001610:	b003      	add	sp, #12
 8001612:	4770      	bx	lr
 8001614:	20000000 	.word	0x20000000
 8001618:	ffff0208 	.word	0xffff0208

0800161c <_strerror_r>:
 800161c:	b510      	push	{r4, lr}
 800161e:	4604      	mov	r4, r0
 8001620:	4608      	mov	r0, r1
 8001622:	4611      	mov	r1, r2
 8001624:	288e      	cmp	r0, #142	; 0x8e
 8001626:	f200 812f 	bhi.w	8001888 <_strerror_r+0x26c>
 800162a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800162e:	0138      	.short	0x0138
 8001630:	0091008f 	.word	0x0091008f
 8001634:	00950093 	.word	0x00950093
 8001638:	00990097 	.word	0x00990097
 800163c:	009d009b 	.word	0x009d009b
 8001640:	00a300a1 	.word	0x00a300a1
 8001644:	00a900a7 	.word	0x00a900a7
 8001648:	00ad00ab 	.word	0x00ad00ab
 800164c:	00af012d 	.word	0x00af012d
 8001650:	00b300b1 	.word	0x00b300b1
 8001654:	00b700b5 	.word	0x00b700b5
 8001658:	00bf00bd 	.word	0x00bf00bd
 800165c:	00c700c5 	.word	0x00c700c5
 8001660:	00cb00c9 	.word	0x00cb00c9
 8001664:	00d100cd 	.word	0x00d100cd
 8001668:	00d700d5 	.word	0x00d700d5
 800166c:	00db00d9 	.word	0x00db00d9
 8001670:	00df00dd 	.word	0x00df00dd
 8001674:	00e300e1 	.word	0x00e300e1
 8001678:	012d012d 	.word	0x012d012d
 800167c:	012d012d 	.word	0x012d012d
 8001680:	012d012d 	.word	0x012d012d
 8001684:	012d012d 	.word	0x012d012d
 8001688:	00eb00e7 	.word	0x00eb00e7
 800168c:	012d012d 	.word	0x012d012d
 8001690:	012d012d 	.word	0x012d012d
 8001694:	012d012d 	.word	0x012d012d
 8001698:	012d012d 	.word	0x012d012d
 800169c:	012d012d 	.word	0x012d012d
 80016a0:	012d012d 	.word	0x012d012d
 80016a4:	00ed012d 	.word	0x00ed012d
 80016a8:	00ef0107 	.word	0x00ef0107
 80016ac:	012d00f1 	.word	0x012d00f1
 80016b0:	012d012d 	.word	0x012d012d
 80016b4:	012d00f3 	.word	0x012d00f3
 80016b8:	012d012d 	.word	0x012d012d
 80016bc:	012d00f5 	.word	0x012d00f5
 80016c0:	00f9012d 	.word	0x00f9012d
 80016c4:	012d012d 	.word	0x012d012d
 80016c8:	012d00fb 	.word	0x012d00fb
 80016cc:	012d012d 	.word	0x012d012d
 80016d0:	012d012d 	.word	0x012d012d
 80016d4:	012d012d 	.word	0x012d012d
 80016d8:	012d012d 	.word	0x012d012d
 80016dc:	00fd012d 	.word	0x00fd012d
 80016e0:	00ff012d 	.word	0x00ff012d
 80016e4:	01030101 	.word	0x01030101
 80016e8:	012d012d 	.word	0x012d012d
 80016ec:	012d0125 	.word	0x012d0125
 80016f0:	012d012d 	.word	0x012d012d
 80016f4:	012d012d 	.word	0x012d012d
 80016f8:	012d012d 	.word	0x012d012d
 80016fc:	0113012d 	.word	0x0113012d
 8001700:	01090105 	.word	0x01090105
 8001704:	010d010b 	.word	0x010d010b
 8001708:	012d010f 	.word	0x012d010f
 800170c:	01150111 	.word	0x01150111
 8001710:	00e90119 	.word	0x00e90119
 8001714:	012b00c1 	.word	0x012b00c1
 8001718:	00cf00b9 	.word	0x00cf00b9
 800171c:	009f00bb 	.word	0x009f00bb
 8001720:	012900a5 	.word	0x012900a5
 8001724:	012d00f7 	.word	0x012d00f7
 8001728:	00c30117 	.word	0x00c30117
 800172c:	011b011d 	.word	0x011b011d
 8001730:	012d012d 	.word	0x012d012d
 8001734:	012d012d 	.word	0x012d012d
 8001738:	00d3012d 	.word	0x00d3012d
 800173c:	012d012d 	.word	0x012d012d
 8001740:	00e5012d 	.word	0x00e5012d
 8001744:	011f0127 	.word	0x011f0127
 8001748:	01230121 	.word	0x01230121
 800174c:	4855      	ldr	r0, [pc, #340]	; (80018a4 <_strerror_r+0x288>)
 800174e:	bd10      	pop	{r4, pc}
 8001750:	4855      	ldr	r0, [pc, #340]	; (80018a8 <_strerror_r+0x28c>)
 8001752:	e7fc      	b.n	800174e <_strerror_r+0x132>
 8001754:	4855      	ldr	r0, [pc, #340]	; (80018ac <_strerror_r+0x290>)
 8001756:	e7fa      	b.n	800174e <_strerror_r+0x132>
 8001758:	4855      	ldr	r0, [pc, #340]	; (80018b0 <_strerror_r+0x294>)
 800175a:	e7f8      	b.n	800174e <_strerror_r+0x132>
 800175c:	4855      	ldr	r0, [pc, #340]	; (80018b4 <_strerror_r+0x298>)
 800175e:	e7f6      	b.n	800174e <_strerror_r+0x132>
 8001760:	4855      	ldr	r0, [pc, #340]	; (80018b8 <_strerror_r+0x29c>)
 8001762:	e7f4      	b.n	800174e <_strerror_r+0x132>
 8001764:	4855      	ldr	r0, [pc, #340]	; (80018bc <_strerror_r+0x2a0>)
 8001766:	e7f2      	b.n	800174e <_strerror_r+0x132>
 8001768:	4855      	ldr	r0, [pc, #340]	; (80018c0 <_strerror_r+0x2a4>)
 800176a:	e7f0      	b.n	800174e <_strerror_r+0x132>
 800176c:	4855      	ldr	r0, [pc, #340]	; (80018c4 <_strerror_r+0x2a8>)
 800176e:	e7ee      	b.n	800174e <_strerror_r+0x132>
 8001770:	4855      	ldr	r0, [pc, #340]	; (80018c8 <_strerror_r+0x2ac>)
 8001772:	e7ec      	b.n	800174e <_strerror_r+0x132>
 8001774:	4855      	ldr	r0, [pc, #340]	; (80018cc <_strerror_r+0x2b0>)
 8001776:	e7ea      	b.n	800174e <_strerror_r+0x132>
 8001778:	4855      	ldr	r0, [pc, #340]	; (80018d0 <_strerror_r+0x2b4>)
 800177a:	e7e8      	b.n	800174e <_strerror_r+0x132>
 800177c:	4855      	ldr	r0, [pc, #340]	; (80018d4 <_strerror_r+0x2b8>)
 800177e:	e7e6      	b.n	800174e <_strerror_r+0x132>
 8001780:	4855      	ldr	r0, [pc, #340]	; (80018d8 <_strerror_r+0x2bc>)
 8001782:	e7e4      	b.n	800174e <_strerror_r+0x132>
 8001784:	4855      	ldr	r0, [pc, #340]	; (80018dc <_strerror_r+0x2c0>)
 8001786:	e7e2      	b.n	800174e <_strerror_r+0x132>
 8001788:	4855      	ldr	r0, [pc, #340]	; (80018e0 <_strerror_r+0x2c4>)
 800178a:	e7e0      	b.n	800174e <_strerror_r+0x132>
 800178c:	4855      	ldr	r0, [pc, #340]	; (80018e4 <_strerror_r+0x2c8>)
 800178e:	e7de      	b.n	800174e <_strerror_r+0x132>
 8001790:	4855      	ldr	r0, [pc, #340]	; (80018e8 <_strerror_r+0x2cc>)
 8001792:	e7dc      	b.n	800174e <_strerror_r+0x132>
 8001794:	4855      	ldr	r0, [pc, #340]	; (80018ec <_strerror_r+0x2d0>)
 8001796:	e7da      	b.n	800174e <_strerror_r+0x132>
 8001798:	4855      	ldr	r0, [pc, #340]	; (80018f0 <_strerror_r+0x2d4>)
 800179a:	e7d8      	b.n	800174e <_strerror_r+0x132>
 800179c:	4855      	ldr	r0, [pc, #340]	; (80018f4 <_strerror_r+0x2d8>)
 800179e:	e7d6      	b.n	800174e <_strerror_r+0x132>
 80017a0:	4855      	ldr	r0, [pc, #340]	; (80018f8 <_strerror_r+0x2dc>)
 80017a2:	e7d4      	b.n	800174e <_strerror_r+0x132>
 80017a4:	4855      	ldr	r0, [pc, #340]	; (80018fc <_strerror_r+0x2e0>)
 80017a6:	e7d2      	b.n	800174e <_strerror_r+0x132>
 80017a8:	4855      	ldr	r0, [pc, #340]	; (8001900 <_strerror_r+0x2e4>)
 80017aa:	e7d0      	b.n	800174e <_strerror_r+0x132>
 80017ac:	4855      	ldr	r0, [pc, #340]	; (8001904 <_strerror_r+0x2e8>)
 80017ae:	e7ce      	b.n	800174e <_strerror_r+0x132>
 80017b0:	4855      	ldr	r0, [pc, #340]	; (8001908 <_strerror_r+0x2ec>)
 80017b2:	e7cc      	b.n	800174e <_strerror_r+0x132>
 80017b4:	4855      	ldr	r0, [pc, #340]	; (800190c <_strerror_r+0x2f0>)
 80017b6:	e7ca      	b.n	800174e <_strerror_r+0x132>
 80017b8:	4855      	ldr	r0, [pc, #340]	; (8001910 <_strerror_r+0x2f4>)
 80017ba:	e7c8      	b.n	800174e <_strerror_r+0x132>
 80017bc:	4855      	ldr	r0, [pc, #340]	; (8001914 <_strerror_r+0x2f8>)
 80017be:	e7c6      	b.n	800174e <_strerror_r+0x132>
 80017c0:	4855      	ldr	r0, [pc, #340]	; (8001918 <_strerror_r+0x2fc>)
 80017c2:	e7c4      	b.n	800174e <_strerror_r+0x132>
 80017c4:	4855      	ldr	r0, [pc, #340]	; (800191c <_strerror_r+0x300>)
 80017c6:	e7c2      	b.n	800174e <_strerror_r+0x132>
 80017c8:	4855      	ldr	r0, [pc, #340]	; (8001920 <_strerror_r+0x304>)
 80017ca:	e7c0      	b.n	800174e <_strerror_r+0x132>
 80017cc:	4855      	ldr	r0, [pc, #340]	; (8001924 <_strerror_r+0x308>)
 80017ce:	e7be      	b.n	800174e <_strerror_r+0x132>
 80017d0:	4855      	ldr	r0, [pc, #340]	; (8001928 <_strerror_r+0x30c>)
 80017d2:	e7bc      	b.n	800174e <_strerror_r+0x132>
 80017d4:	4855      	ldr	r0, [pc, #340]	; (800192c <_strerror_r+0x310>)
 80017d6:	e7ba      	b.n	800174e <_strerror_r+0x132>
 80017d8:	4855      	ldr	r0, [pc, #340]	; (8001930 <_strerror_r+0x314>)
 80017da:	e7b8      	b.n	800174e <_strerror_r+0x132>
 80017dc:	4855      	ldr	r0, [pc, #340]	; (8001934 <_strerror_r+0x318>)
 80017de:	e7b6      	b.n	800174e <_strerror_r+0x132>
 80017e0:	4855      	ldr	r0, [pc, #340]	; (8001938 <_strerror_r+0x31c>)
 80017e2:	e7b4      	b.n	800174e <_strerror_r+0x132>
 80017e4:	4855      	ldr	r0, [pc, #340]	; (800193c <_strerror_r+0x320>)
 80017e6:	e7b2      	b.n	800174e <_strerror_r+0x132>
 80017e8:	4855      	ldr	r0, [pc, #340]	; (8001940 <_strerror_r+0x324>)
 80017ea:	e7b0      	b.n	800174e <_strerror_r+0x132>
 80017ec:	4855      	ldr	r0, [pc, #340]	; (8001944 <_strerror_r+0x328>)
 80017ee:	e7ae      	b.n	800174e <_strerror_r+0x132>
 80017f0:	4855      	ldr	r0, [pc, #340]	; (8001948 <_strerror_r+0x32c>)
 80017f2:	e7ac      	b.n	800174e <_strerror_r+0x132>
 80017f4:	4855      	ldr	r0, [pc, #340]	; (800194c <_strerror_r+0x330>)
 80017f6:	e7aa      	b.n	800174e <_strerror_r+0x132>
 80017f8:	4855      	ldr	r0, [pc, #340]	; (8001950 <_strerror_r+0x334>)
 80017fa:	e7a8      	b.n	800174e <_strerror_r+0x132>
 80017fc:	4855      	ldr	r0, [pc, #340]	; (8001954 <_strerror_r+0x338>)
 80017fe:	e7a6      	b.n	800174e <_strerror_r+0x132>
 8001800:	4855      	ldr	r0, [pc, #340]	; (8001958 <_strerror_r+0x33c>)
 8001802:	e7a4      	b.n	800174e <_strerror_r+0x132>
 8001804:	4855      	ldr	r0, [pc, #340]	; (800195c <_strerror_r+0x340>)
 8001806:	e7a2      	b.n	800174e <_strerror_r+0x132>
 8001808:	4855      	ldr	r0, [pc, #340]	; (8001960 <_strerror_r+0x344>)
 800180a:	e7a0      	b.n	800174e <_strerror_r+0x132>
 800180c:	4855      	ldr	r0, [pc, #340]	; (8001964 <_strerror_r+0x348>)
 800180e:	e79e      	b.n	800174e <_strerror_r+0x132>
 8001810:	4855      	ldr	r0, [pc, #340]	; (8001968 <_strerror_r+0x34c>)
 8001812:	e79c      	b.n	800174e <_strerror_r+0x132>
 8001814:	4855      	ldr	r0, [pc, #340]	; (800196c <_strerror_r+0x350>)
 8001816:	e79a      	b.n	800174e <_strerror_r+0x132>
 8001818:	4855      	ldr	r0, [pc, #340]	; (8001970 <_strerror_r+0x354>)
 800181a:	e798      	b.n	800174e <_strerror_r+0x132>
 800181c:	4855      	ldr	r0, [pc, #340]	; (8001974 <_strerror_r+0x358>)
 800181e:	e796      	b.n	800174e <_strerror_r+0x132>
 8001820:	4855      	ldr	r0, [pc, #340]	; (8001978 <_strerror_r+0x35c>)
 8001822:	e794      	b.n	800174e <_strerror_r+0x132>
 8001824:	4855      	ldr	r0, [pc, #340]	; (800197c <_strerror_r+0x360>)
 8001826:	e792      	b.n	800174e <_strerror_r+0x132>
 8001828:	4855      	ldr	r0, [pc, #340]	; (8001980 <_strerror_r+0x364>)
 800182a:	e790      	b.n	800174e <_strerror_r+0x132>
 800182c:	4855      	ldr	r0, [pc, #340]	; (8001984 <_strerror_r+0x368>)
 800182e:	e78e      	b.n	800174e <_strerror_r+0x132>
 8001830:	4855      	ldr	r0, [pc, #340]	; (8001988 <_strerror_r+0x36c>)
 8001832:	e78c      	b.n	800174e <_strerror_r+0x132>
 8001834:	4855      	ldr	r0, [pc, #340]	; (800198c <_strerror_r+0x370>)
 8001836:	e78a      	b.n	800174e <_strerror_r+0x132>
 8001838:	4855      	ldr	r0, [pc, #340]	; (8001990 <_strerror_r+0x374>)
 800183a:	e788      	b.n	800174e <_strerror_r+0x132>
 800183c:	4855      	ldr	r0, [pc, #340]	; (8001994 <_strerror_r+0x378>)
 800183e:	e786      	b.n	800174e <_strerror_r+0x132>
 8001840:	4855      	ldr	r0, [pc, #340]	; (8001998 <_strerror_r+0x37c>)
 8001842:	e784      	b.n	800174e <_strerror_r+0x132>
 8001844:	4855      	ldr	r0, [pc, #340]	; (800199c <_strerror_r+0x380>)
 8001846:	e782      	b.n	800174e <_strerror_r+0x132>
 8001848:	4855      	ldr	r0, [pc, #340]	; (80019a0 <_strerror_r+0x384>)
 800184a:	e780      	b.n	800174e <_strerror_r+0x132>
 800184c:	4855      	ldr	r0, [pc, #340]	; (80019a4 <_strerror_r+0x388>)
 800184e:	e77e      	b.n	800174e <_strerror_r+0x132>
 8001850:	4855      	ldr	r0, [pc, #340]	; (80019a8 <_strerror_r+0x38c>)
 8001852:	e77c      	b.n	800174e <_strerror_r+0x132>
 8001854:	4855      	ldr	r0, [pc, #340]	; (80019ac <_strerror_r+0x390>)
 8001856:	e77a      	b.n	800174e <_strerror_r+0x132>
 8001858:	4855      	ldr	r0, [pc, #340]	; (80019b0 <_strerror_r+0x394>)
 800185a:	e778      	b.n	800174e <_strerror_r+0x132>
 800185c:	4855      	ldr	r0, [pc, #340]	; (80019b4 <_strerror_r+0x398>)
 800185e:	e776      	b.n	800174e <_strerror_r+0x132>
 8001860:	4855      	ldr	r0, [pc, #340]	; (80019b8 <_strerror_r+0x39c>)
 8001862:	e774      	b.n	800174e <_strerror_r+0x132>
 8001864:	4855      	ldr	r0, [pc, #340]	; (80019bc <_strerror_r+0x3a0>)
 8001866:	e772      	b.n	800174e <_strerror_r+0x132>
 8001868:	4855      	ldr	r0, [pc, #340]	; (80019c0 <_strerror_r+0x3a4>)
 800186a:	e770      	b.n	800174e <_strerror_r+0x132>
 800186c:	4855      	ldr	r0, [pc, #340]	; (80019c4 <_strerror_r+0x3a8>)
 800186e:	e76e      	b.n	800174e <_strerror_r+0x132>
 8001870:	4855      	ldr	r0, [pc, #340]	; (80019c8 <_strerror_r+0x3ac>)
 8001872:	e76c      	b.n	800174e <_strerror_r+0x132>
 8001874:	4855      	ldr	r0, [pc, #340]	; (80019cc <_strerror_r+0x3b0>)
 8001876:	e76a      	b.n	800174e <_strerror_r+0x132>
 8001878:	4855      	ldr	r0, [pc, #340]	; (80019d0 <_strerror_r+0x3b4>)
 800187a:	e768      	b.n	800174e <_strerror_r+0x132>
 800187c:	4855      	ldr	r0, [pc, #340]	; (80019d4 <_strerror_r+0x3b8>)
 800187e:	e766      	b.n	800174e <_strerror_r+0x132>
 8001880:	4855      	ldr	r0, [pc, #340]	; (80019d8 <_strerror_r+0x3bc>)
 8001882:	e764      	b.n	800174e <_strerror_r+0x132>
 8001884:	4855      	ldr	r0, [pc, #340]	; (80019dc <_strerror_r+0x3c0>)
 8001886:	e762      	b.n	800174e <_strerror_r+0x132>
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf14      	ite	ne
 800188c:	461a      	movne	r2, r3
 800188e:	4622      	moveq	r2, r4
 8001890:	f000 f8aa 	bl	80019e8 <_user_strerror>
 8001894:	4b52      	ldr	r3, [pc, #328]	; (80019e0 <_strerror_r+0x3c4>)
 8001896:	2800      	cmp	r0, #0
 8001898:	bf08      	it	eq
 800189a:	4618      	moveq	r0, r3
 800189c:	e757      	b.n	800174e <_strerror_r+0x132>
 800189e:	4851      	ldr	r0, [pc, #324]	; (80019e4 <_strerror_r+0x3c8>)
 80018a0:	e755      	b.n	800174e <_strerror_r+0x132>
 80018a2:	bf00      	nop
 80018a4:	08002981 	.word	0x08002981
 80018a8:	0800298b 	.word	0x0800298b
 80018ac:	080029a5 	.word	0x080029a5
 80018b0:	080029b5 	.word	0x080029b5
 80018b4:	080029cd 	.word	0x080029cd
 80018b8:	080029d7 	.word	0x080029d7
 80018bc:	080029f1 	.word	0x080029f1
 80018c0:	08002a03 	.word	0x08002a03
 80018c4:	08002a15 	.word	0x08002a15
 80018c8:	08002a2e 	.word	0x08002a2e
 80018cc:	08002a3e 	.word	0x08002a3e
 80018d0:	08002a4a 	.word	0x08002a4a
 80018d4:	08002a67 	.word	0x08002a67
 80018d8:	08002a79 	.word	0x08002a79
 80018dc:	08002a8a 	.word	0x08002a8a
 80018e0:	08002a9c 	.word	0x08002a9c
 80018e4:	08002aa8 	.word	0x08002aa8
 80018e8:	08002ac0 	.word	0x08002ac0
 80018ec:	08002acc 	.word	0x08002acc
 80018f0:	08002ade 	.word	0x08002ade
 80018f4:	08002aed 	.word	0x08002aed
 80018f8:	08002afd 	.word	0x08002afd
 80018fc:	08002b0a 	.word	0x08002b0a
 8001900:	08002b29 	.word	0x08002b29
 8001904:	08002b38 	.word	0x08002b38
 8001908:	08002b49 	.word	0x08002b49
 800190c:	08002b6d 	.word	0x08002b6d
 8001910:	08002b8b 	.word	0x08002b8b
 8001914:	08002ba9 	.word	0x08002ba9
 8001918:	08002bc9 	.word	0x08002bc9
 800191c:	08002be0 	.word	0x08002be0
 8001920:	08002bef 	.word	0x08002bef
 8001924:	08002bfe 	.word	0x08002bfe
 8001928:	08002c12 	.word	0x08002c12
 800192c:	08002c2a 	.word	0x08002c2a
 8001930:	08002c38 	.word	0x08002c38
 8001934:	08002c45 	.word	0x08002c45
 8001938:	08002c5b 	.word	0x08002c5b
 800193c:	08002c6a 	.word	0x08002c6a
 8001940:	08002c76 	.word	0x08002c76
 8001944:	08002ca5 	.word	0x08002ca5
 8001948:	08002cb6 	.word	0x08002cb6
 800194c:	08002cd1 	.word	0x08002cd1
 8001950:	08002ce4 	.word	0x08002ce4
 8001954:	08002cfa 	.word	0x08002cfa
 8001958:	08002d03 	.word	0x08002d03
 800195c:	08002d1a 	.word	0x08002d1a
 8001960:	08002d22 	.word	0x08002d22
 8001964:	08002d2f 	.word	0x08002d2f
 8001968:	08002d44 	.word	0x08002d44
 800196c:	08002d58 	.word	0x08002d58
 8001970:	08002d70 	.word	0x08002d70
 8001974:	08002d7f 	.word	0x08002d7f
 8001978:	08002d90 	.word	0x08002d90
 800197c:	08002da3 	.word	0x08002da3
 8001980:	08002daf 	.word	0x08002daf
 8001984:	08002dc8 	.word	0x08002dc8
 8001988:	08002ddc 	.word	0x08002ddc
 800198c:	08002df7 	.word	0x08002df7
 8001990:	08002e0f 	.word	0x08002e0f
 8001994:	08002e29 	.word	0x08002e29
 8001998:	08002e31 	.word	0x08002e31
 800199c:	08002e61 	.word	0x08002e61
 80019a0:	08002e80 	.word	0x08002e80
 80019a4:	08002e9f 	.word	0x08002e9f
 80019a8:	08002eb6 	.word	0x08002eb6
 80019ac:	08002ec9 	.word	0x08002ec9
 80019b0:	08002ee2 	.word	0x08002ee2
 80019b4:	08002ef9 	.word	0x08002ef9
 80019b8:	08002f0f 	.word	0x08002f0f
 80019bc:	08002f30 	.word	0x08002f30
 80019c0:	08002f48 	.word	0x08002f48
 80019c4:	08002f64 	.word	0x08002f64
 80019c8:	08002f77 	.word	0x08002f77
 80019cc:	08002f8d 	.word	0x08002f8d
 80019d0:	08002fa1 	.word	0x08002fa1
 80019d4:	08002fc3 	.word	0x08002fc3
 80019d8:	08002fe9 	.word	0x08002fe9
 80019dc:	08002ffa 	.word	0x08002ffa
 80019e0:	08002980 	.word	0x08002980
 80019e4:	0800300f 	.word	0x0800300f

080019e8 <_user_strerror>:
 80019e8:	2000      	movs	r0, #0
 80019ea:	4770      	bx	lr

080019ec <_vsiprintf_r>:
 80019ec:	b500      	push	{lr}
 80019ee:	b09b      	sub	sp, #108	; 0x6c
 80019f0:	9100      	str	r1, [sp, #0]
 80019f2:	9104      	str	r1, [sp, #16]
 80019f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80019f8:	9105      	str	r1, [sp, #20]
 80019fa:	9102      	str	r1, [sp, #8]
 80019fc:	4905      	ldr	r1, [pc, #20]	; (8001a14 <_vsiprintf_r+0x28>)
 80019fe:	9103      	str	r1, [sp, #12]
 8001a00:	4669      	mov	r1, sp
 8001a02:	f000 fb23 	bl	800204c <_svfiprintf_r>
 8001a06:	9b00      	ldr	r3, [sp, #0]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	b01b      	add	sp, #108	; 0x6c
 8001a0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a12:	bf00      	nop
 8001a14:	ffff0208 	.word	0xffff0208

08001a18 <vsiprintf>:
 8001a18:	4613      	mov	r3, r2
 8001a1a:	460a      	mov	r2, r1
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	4802      	ldr	r0, [pc, #8]	; (8001a28 <vsiprintf+0x10>)
 8001a20:	6800      	ldr	r0, [r0, #0]
 8001a22:	f7ff bfe3 	b.w	80019ec <_vsiprintf_r>
 8001a26:	bf00      	nop
 8001a28:	20000000 	.word	0x20000000

08001a2c <_write_r>:
 8001a2c:	b538      	push	{r3, r4, r5, lr}
 8001a2e:	4d07      	ldr	r5, [pc, #28]	; (8001a4c <_write_r+0x20>)
 8001a30:	4604      	mov	r4, r0
 8001a32:	4608      	mov	r0, r1
 8001a34:	4611      	mov	r1, r2
 8001a36:	2200      	movs	r2, #0
 8001a38:	602a      	str	r2, [r5, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f7ff fa79 	bl	8000f32 <_write>
 8001a40:	1c43      	adds	r3, r0, #1
 8001a42:	d102      	bne.n	8001a4a <_write_r+0x1e>
 8001a44:	682b      	ldr	r3, [r5, #0]
 8001a46:	b103      	cbz	r3, 8001a4a <_write_r+0x1e>
 8001a48:	6023      	str	r3, [r4, #0]
 8001a4a:	bd38      	pop	{r3, r4, r5, pc}
 8001a4c:	200000d8 	.word	0x200000d8

08001a50 <__sflush_r>:
 8001a50:	898a      	ldrh	r2, [r1, #12]
 8001a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a56:	4605      	mov	r5, r0
 8001a58:	0710      	lsls	r0, r2, #28
 8001a5a:	460c      	mov	r4, r1
 8001a5c:	d458      	bmi.n	8001b10 <__sflush_r+0xc0>
 8001a5e:	684b      	ldr	r3, [r1, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	dc05      	bgt.n	8001a70 <__sflush_r+0x20>
 8001a64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	dc02      	bgt.n	8001a70 <__sflush_r+0x20>
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a72:	2e00      	cmp	r6, #0
 8001a74:	d0f9      	beq.n	8001a6a <__sflush_r+0x1a>
 8001a76:	2300      	movs	r3, #0
 8001a78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a7c:	682f      	ldr	r7, [r5, #0]
 8001a7e:	602b      	str	r3, [r5, #0]
 8001a80:	d032      	beq.n	8001ae8 <__sflush_r+0x98>
 8001a82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a84:	89a3      	ldrh	r3, [r4, #12]
 8001a86:	075a      	lsls	r2, r3, #29
 8001a88:	d505      	bpl.n	8001a96 <__sflush_r+0x46>
 8001a8a:	6863      	ldr	r3, [r4, #4]
 8001a8c:	1ac0      	subs	r0, r0, r3
 8001a8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a90:	b10b      	cbz	r3, 8001a96 <__sflush_r+0x46>
 8001a92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a94:	1ac0      	subs	r0, r0, r3
 8001a96:	2300      	movs	r3, #0
 8001a98:	4602      	mov	r2, r0
 8001a9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a9c:	6a21      	ldr	r1, [r4, #32]
 8001a9e:	4628      	mov	r0, r5
 8001aa0:	47b0      	blx	r6
 8001aa2:	1c43      	adds	r3, r0, #1
 8001aa4:	89a3      	ldrh	r3, [r4, #12]
 8001aa6:	d106      	bne.n	8001ab6 <__sflush_r+0x66>
 8001aa8:	6829      	ldr	r1, [r5, #0]
 8001aaa:	291d      	cmp	r1, #29
 8001aac:	d82c      	bhi.n	8001b08 <__sflush_r+0xb8>
 8001aae:	4a2a      	ldr	r2, [pc, #168]	; (8001b58 <__sflush_r+0x108>)
 8001ab0:	40ca      	lsrs	r2, r1
 8001ab2:	07d6      	lsls	r6, r2, #31
 8001ab4:	d528      	bpl.n	8001b08 <__sflush_r+0xb8>
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	6062      	str	r2, [r4, #4]
 8001aba:	04d9      	lsls	r1, r3, #19
 8001abc:	6922      	ldr	r2, [r4, #16]
 8001abe:	6022      	str	r2, [r4, #0]
 8001ac0:	d504      	bpl.n	8001acc <__sflush_r+0x7c>
 8001ac2:	1c42      	adds	r2, r0, #1
 8001ac4:	d101      	bne.n	8001aca <__sflush_r+0x7a>
 8001ac6:	682b      	ldr	r3, [r5, #0]
 8001ac8:	b903      	cbnz	r3, 8001acc <__sflush_r+0x7c>
 8001aca:	6560      	str	r0, [r4, #84]	; 0x54
 8001acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ace:	602f      	str	r7, [r5, #0]
 8001ad0:	2900      	cmp	r1, #0
 8001ad2:	d0ca      	beq.n	8001a6a <__sflush_r+0x1a>
 8001ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ad8:	4299      	cmp	r1, r3
 8001ada:	d002      	beq.n	8001ae2 <__sflush_r+0x92>
 8001adc:	4628      	mov	r0, r5
 8001ade:	f000 f9af 	bl	8001e40 <_free_r>
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	6360      	str	r0, [r4, #52]	; 0x34
 8001ae6:	e7c1      	b.n	8001a6c <__sflush_r+0x1c>
 8001ae8:	6a21      	ldr	r1, [r4, #32]
 8001aea:	2301      	movs	r3, #1
 8001aec:	4628      	mov	r0, r5
 8001aee:	47b0      	blx	r6
 8001af0:	1c41      	adds	r1, r0, #1
 8001af2:	d1c7      	bne.n	8001a84 <__sflush_r+0x34>
 8001af4:	682b      	ldr	r3, [r5, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0c4      	beq.n	8001a84 <__sflush_r+0x34>
 8001afa:	2b1d      	cmp	r3, #29
 8001afc:	d001      	beq.n	8001b02 <__sflush_r+0xb2>
 8001afe:	2b16      	cmp	r3, #22
 8001b00:	d101      	bne.n	8001b06 <__sflush_r+0xb6>
 8001b02:	602f      	str	r7, [r5, #0]
 8001b04:	e7b1      	b.n	8001a6a <__sflush_r+0x1a>
 8001b06:	89a3      	ldrh	r3, [r4, #12]
 8001b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b0c:	81a3      	strh	r3, [r4, #12]
 8001b0e:	e7ad      	b.n	8001a6c <__sflush_r+0x1c>
 8001b10:	690f      	ldr	r7, [r1, #16]
 8001b12:	2f00      	cmp	r7, #0
 8001b14:	d0a9      	beq.n	8001a6a <__sflush_r+0x1a>
 8001b16:	0793      	lsls	r3, r2, #30
 8001b18:	680e      	ldr	r6, [r1, #0]
 8001b1a:	bf08      	it	eq
 8001b1c:	694b      	ldreq	r3, [r1, #20]
 8001b1e:	600f      	str	r7, [r1, #0]
 8001b20:	bf18      	it	ne
 8001b22:	2300      	movne	r3, #0
 8001b24:	eba6 0807 	sub.w	r8, r6, r7
 8001b28:	608b      	str	r3, [r1, #8]
 8001b2a:	f1b8 0f00 	cmp.w	r8, #0
 8001b2e:	dd9c      	ble.n	8001a6a <__sflush_r+0x1a>
 8001b30:	6a21      	ldr	r1, [r4, #32]
 8001b32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001b34:	4643      	mov	r3, r8
 8001b36:	463a      	mov	r2, r7
 8001b38:	4628      	mov	r0, r5
 8001b3a:	47b0      	blx	r6
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	dc06      	bgt.n	8001b4e <__sflush_r+0xfe>
 8001b40:	89a3      	ldrh	r3, [r4, #12]
 8001b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b46:	81a3      	strh	r3, [r4, #12]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	e78e      	b.n	8001a6c <__sflush_r+0x1c>
 8001b4e:	4407      	add	r7, r0
 8001b50:	eba8 0800 	sub.w	r8, r8, r0
 8001b54:	e7e9      	b.n	8001b2a <__sflush_r+0xda>
 8001b56:	bf00      	nop
 8001b58:	20400001 	.word	0x20400001

08001b5c <_fflush_r>:
 8001b5c:	b538      	push	{r3, r4, r5, lr}
 8001b5e:	690b      	ldr	r3, [r1, #16]
 8001b60:	4605      	mov	r5, r0
 8001b62:	460c      	mov	r4, r1
 8001b64:	b913      	cbnz	r3, 8001b6c <_fflush_r+0x10>
 8001b66:	2500      	movs	r5, #0
 8001b68:	4628      	mov	r0, r5
 8001b6a:	bd38      	pop	{r3, r4, r5, pc}
 8001b6c:	b118      	cbz	r0, 8001b76 <_fflush_r+0x1a>
 8001b6e:	6983      	ldr	r3, [r0, #24]
 8001b70:	b90b      	cbnz	r3, 8001b76 <_fflush_r+0x1a>
 8001b72:	f000 f8c5 	bl	8001d00 <__sinit>
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <_fflush_r+0x6c>)
 8001b78:	429c      	cmp	r4, r3
 8001b7a:	d11b      	bne.n	8001bb4 <_fflush_r+0x58>
 8001b7c:	686c      	ldr	r4, [r5, #4]
 8001b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0ef      	beq.n	8001b66 <_fflush_r+0xa>
 8001b86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b88:	07d0      	lsls	r0, r2, #31
 8001b8a:	d404      	bmi.n	8001b96 <_fflush_r+0x3a>
 8001b8c:	0599      	lsls	r1, r3, #22
 8001b8e:	d402      	bmi.n	8001b96 <_fflush_r+0x3a>
 8001b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b92:	f000 f953 	bl	8001e3c <__retarget_lock_acquire_recursive>
 8001b96:	4628      	mov	r0, r5
 8001b98:	4621      	mov	r1, r4
 8001b9a:	f7ff ff59 	bl	8001a50 <__sflush_r>
 8001b9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ba0:	07da      	lsls	r2, r3, #31
 8001ba2:	4605      	mov	r5, r0
 8001ba4:	d4e0      	bmi.n	8001b68 <_fflush_r+0xc>
 8001ba6:	89a3      	ldrh	r3, [r4, #12]
 8001ba8:	059b      	lsls	r3, r3, #22
 8001baa:	d4dd      	bmi.n	8001b68 <_fflush_r+0xc>
 8001bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bae:	f000 f946 	bl	8001e3e <__retarget_lock_release_recursive>
 8001bb2:	e7d9      	b.n	8001b68 <_fflush_r+0xc>
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <_fflush_r+0x70>)
 8001bb6:	429c      	cmp	r4, r3
 8001bb8:	d101      	bne.n	8001bbe <_fflush_r+0x62>
 8001bba:	68ac      	ldr	r4, [r5, #8]
 8001bbc:	e7df      	b.n	8001b7e <_fflush_r+0x22>
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <_fflush_r+0x74>)
 8001bc0:	429c      	cmp	r4, r3
 8001bc2:	bf08      	it	eq
 8001bc4:	68ec      	ldreq	r4, [r5, #12]
 8001bc6:	e7da      	b.n	8001b7e <_fflush_r+0x22>
 8001bc8:	08003038 	.word	0x08003038
 8001bcc:	08003058 	.word	0x08003058
 8001bd0:	08003018 	.word	0x08003018

08001bd4 <fileno>:
 8001bd4:	b570      	push	{r4, r5, r6, lr}
 8001bd6:	4e1a      	ldr	r6, [pc, #104]	; (8001c40 <fileno+0x6c>)
 8001bd8:	6835      	ldr	r5, [r6, #0]
 8001bda:	4604      	mov	r4, r0
 8001bdc:	b125      	cbz	r5, 8001be8 <fileno+0x14>
 8001bde:	69ab      	ldr	r3, [r5, #24]
 8001be0:	b913      	cbnz	r3, 8001be8 <fileno+0x14>
 8001be2:	4628      	mov	r0, r5
 8001be4:	f000 f88c 	bl	8001d00 <__sinit>
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <fileno+0x70>)
 8001bea:	429c      	cmp	r4, r3
 8001bec:	d118      	bne.n	8001c20 <fileno+0x4c>
 8001bee:	686c      	ldr	r4, [r5, #4]
 8001bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bf2:	07d8      	lsls	r0, r3, #31
 8001bf4:	d405      	bmi.n	8001c02 <fileno+0x2e>
 8001bf6:	89a3      	ldrh	r3, [r4, #12]
 8001bf8:	0599      	lsls	r1, r3, #22
 8001bfa:	d402      	bmi.n	8001c02 <fileno+0x2e>
 8001bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bfe:	f000 f91d 	bl	8001e3c <__retarget_lock_acquire_recursive>
 8001c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c06:	b1ab      	cbz	r3, 8001c34 <fileno+0x60>
 8001c08:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8001c0c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001c0e:	07d2      	lsls	r2, r2, #31
 8001c10:	d404      	bmi.n	8001c1c <fileno+0x48>
 8001c12:	059b      	lsls	r3, r3, #22
 8001c14:	d402      	bmi.n	8001c1c <fileno+0x48>
 8001c16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c18:	f000 f911 	bl	8001e3e <__retarget_lock_release_recursive>
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	bd70      	pop	{r4, r5, r6, pc}
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <fileno+0x74>)
 8001c22:	429c      	cmp	r4, r3
 8001c24:	d101      	bne.n	8001c2a <fileno+0x56>
 8001c26:	68ac      	ldr	r4, [r5, #8]
 8001c28:	e7e2      	b.n	8001bf0 <fileno+0x1c>
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <fileno+0x78>)
 8001c2c:	429c      	cmp	r4, r3
 8001c2e:	bf08      	it	eq
 8001c30:	68ec      	ldreq	r4, [r5, #12]
 8001c32:	e7dd      	b.n	8001bf0 <fileno+0x1c>
 8001c34:	6832      	ldr	r2, [r6, #0]
 8001c36:	2109      	movs	r1, #9
 8001c38:	6011      	str	r1, [r2, #0]
 8001c3a:	f04f 35ff 	mov.w	r5, #4294967295
 8001c3e:	e7e5      	b.n	8001c0c <fileno+0x38>
 8001c40:	20000000 	.word	0x20000000
 8001c44:	08003038 	.word	0x08003038
 8001c48:	08003058 	.word	0x08003058
 8001c4c:	08003018 	.word	0x08003018

08001c50 <std>:
 8001c50:	2300      	movs	r3, #0
 8001c52:	b510      	push	{r4, lr}
 8001c54:	4604      	mov	r4, r0
 8001c56:	e9c0 3300 	strd	r3, r3, [r0]
 8001c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c5e:	6083      	str	r3, [r0, #8]
 8001c60:	8181      	strh	r1, [r0, #12]
 8001c62:	6643      	str	r3, [r0, #100]	; 0x64
 8001c64:	81c2      	strh	r2, [r0, #14]
 8001c66:	6183      	str	r3, [r0, #24]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	305c      	adds	r0, #92	; 0x5c
 8001c6e:	f7ff fc0b 	bl	8001488 <memset>
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <std+0x38>)
 8001c74:	6263      	str	r3, [r4, #36]	; 0x24
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <std+0x3c>)
 8001c78:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <std+0x40>)
 8001c7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <std+0x44>)
 8001c80:	6224      	str	r4, [r4, #32]
 8001c82:	6323      	str	r3, [r4, #48]	; 0x30
 8001c84:	bd10      	pop	{r4, pc}
 8001c86:	bf00      	nop
 8001c88:	08002595 	.word	0x08002595
 8001c8c:	080025b7 	.word	0x080025b7
 8001c90:	080025ef 	.word	0x080025ef
 8001c94:	08002613 	.word	0x08002613

08001c98 <_cleanup_r>:
 8001c98:	4901      	ldr	r1, [pc, #4]	; (8001ca0 <_cleanup_r+0x8>)
 8001c9a:	f000 b8af 	b.w	8001dfc <_fwalk_reent>
 8001c9e:	bf00      	nop
 8001ca0:	08001b5d 	.word	0x08001b5d

08001ca4 <__sfmoreglue>:
 8001ca4:	b570      	push	{r4, r5, r6, lr}
 8001ca6:	1e4a      	subs	r2, r1, #1
 8001ca8:	2568      	movs	r5, #104	; 0x68
 8001caa:	4355      	muls	r5, r2
 8001cac:	460e      	mov	r6, r1
 8001cae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001cb2:	f000 f915 	bl	8001ee0 <_malloc_r>
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	b140      	cbz	r0, 8001ccc <__sfmoreglue+0x28>
 8001cba:	2100      	movs	r1, #0
 8001cbc:	e9c0 1600 	strd	r1, r6, [r0]
 8001cc0:	300c      	adds	r0, #12
 8001cc2:	60a0      	str	r0, [r4, #8]
 8001cc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001cc8:	f7ff fbde 	bl	8001488 <memset>
 8001ccc:	4620      	mov	r0, r4
 8001cce:	bd70      	pop	{r4, r5, r6, pc}

08001cd0 <__sfp_lock_acquire>:
 8001cd0:	4801      	ldr	r0, [pc, #4]	; (8001cd8 <__sfp_lock_acquire+0x8>)
 8001cd2:	f000 b8b3 	b.w	8001e3c <__retarget_lock_acquire_recursive>
 8001cd6:	bf00      	nop
 8001cd8:	200000d4 	.word	0x200000d4

08001cdc <__sfp_lock_release>:
 8001cdc:	4801      	ldr	r0, [pc, #4]	; (8001ce4 <__sfp_lock_release+0x8>)
 8001cde:	f000 b8ae 	b.w	8001e3e <__retarget_lock_release_recursive>
 8001ce2:	bf00      	nop
 8001ce4:	200000d4 	.word	0x200000d4

08001ce8 <__sinit_lock_acquire>:
 8001ce8:	4801      	ldr	r0, [pc, #4]	; (8001cf0 <__sinit_lock_acquire+0x8>)
 8001cea:	f000 b8a7 	b.w	8001e3c <__retarget_lock_acquire_recursive>
 8001cee:	bf00      	nop
 8001cf0:	200000cf 	.word	0x200000cf

08001cf4 <__sinit_lock_release>:
 8001cf4:	4801      	ldr	r0, [pc, #4]	; (8001cfc <__sinit_lock_release+0x8>)
 8001cf6:	f000 b8a2 	b.w	8001e3e <__retarget_lock_release_recursive>
 8001cfa:	bf00      	nop
 8001cfc:	200000cf 	.word	0x200000cf

08001d00 <__sinit>:
 8001d00:	b510      	push	{r4, lr}
 8001d02:	4604      	mov	r4, r0
 8001d04:	f7ff fff0 	bl	8001ce8 <__sinit_lock_acquire>
 8001d08:	69a3      	ldr	r3, [r4, #24]
 8001d0a:	b11b      	cbz	r3, 8001d14 <__sinit+0x14>
 8001d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d10:	f7ff bff0 	b.w	8001cf4 <__sinit_lock_release>
 8001d14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001d18:	6523      	str	r3, [r4, #80]	; 0x50
 8001d1a:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <__sinit+0x68>)
 8001d1c:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <__sinit+0x6c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	62a2      	str	r2, [r4, #40]	; 0x28
 8001d22:	42a3      	cmp	r3, r4
 8001d24:	bf04      	itt	eq
 8001d26:	2301      	moveq	r3, #1
 8001d28:	61a3      	streq	r3, [r4, #24]
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f000 f820 	bl	8001d70 <__sfp>
 8001d30:	6060      	str	r0, [r4, #4]
 8001d32:	4620      	mov	r0, r4
 8001d34:	f000 f81c 	bl	8001d70 <__sfp>
 8001d38:	60a0      	str	r0, [r4, #8]
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f000 f818 	bl	8001d70 <__sfp>
 8001d40:	2200      	movs	r2, #0
 8001d42:	60e0      	str	r0, [r4, #12]
 8001d44:	2104      	movs	r1, #4
 8001d46:	6860      	ldr	r0, [r4, #4]
 8001d48:	f7ff ff82 	bl	8001c50 <std>
 8001d4c:	68a0      	ldr	r0, [r4, #8]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2109      	movs	r1, #9
 8001d52:	f7ff ff7d 	bl	8001c50 <std>
 8001d56:	68e0      	ldr	r0, [r4, #12]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	2112      	movs	r1, #18
 8001d5c:	f7ff ff78 	bl	8001c50 <std>
 8001d60:	2301      	movs	r3, #1
 8001d62:	61a3      	str	r3, [r4, #24]
 8001d64:	e7d2      	b.n	8001d0c <__sinit+0xc>
 8001d66:	bf00      	nop
 8001d68:	08002978 	.word	0x08002978
 8001d6c:	08001c99 	.word	0x08001c99

08001d70 <__sfp>:
 8001d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d72:	4607      	mov	r7, r0
 8001d74:	f7ff ffac 	bl	8001cd0 <__sfp_lock_acquire>
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <__sfp+0x84>)
 8001d7a:	681e      	ldr	r6, [r3, #0]
 8001d7c:	69b3      	ldr	r3, [r6, #24]
 8001d7e:	b913      	cbnz	r3, 8001d86 <__sfp+0x16>
 8001d80:	4630      	mov	r0, r6
 8001d82:	f7ff ffbd 	bl	8001d00 <__sinit>
 8001d86:	3648      	adds	r6, #72	; 0x48
 8001d88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	d503      	bpl.n	8001d98 <__sfp+0x28>
 8001d90:	6833      	ldr	r3, [r6, #0]
 8001d92:	b30b      	cbz	r3, 8001dd8 <__sfp+0x68>
 8001d94:	6836      	ldr	r6, [r6, #0]
 8001d96:	e7f7      	b.n	8001d88 <__sfp+0x18>
 8001d98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001d9c:	b9d5      	cbnz	r5, 8001dd4 <__sfp+0x64>
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <__sfp+0x88>)
 8001da0:	60e3      	str	r3, [r4, #12]
 8001da2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001da6:	6665      	str	r5, [r4, #100]	; 0x64
 8001da8:	f000 f847 	bl	8001e3a <__retarget_lock_init_recursive>
 8001dac:	f7ff ff96 	bl	8001cdc <__sfp_lock_release>
 8001db0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001db4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001db8:	6025      	str	r5, [r4, #0]
 8001dba:	61a5      	str	r5, [r4, #24]
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001dc4:	f7ff fb60 	bl	8001488 <memset>
 8001dc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001dcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dd4:	3468      	adds	r4, #104	; 0x68
 8001dd6:	e7d9      	b.n	8001d8c <__sfp+0x1c>
 8001dd8:	2104      	movs	r1, #4
 8001dda:	4638      	mov	r0, r7
 8001ddc:	f7ff ff62 	bl	8001ca4 <__sfmoreglue>
 8001de0:	4604      	mov	r4, r0
 8001de2:	6030      	str	r0, [r6, #0]
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d1d5      	bne.n	8001d94 <__sfp+0x24>
 8001de8:	f7ff ff78 	bl	8001cdc <__sfp_lock_release>
 8001dec:	230c      	movs	r3, #12
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	e7ee      	b.n	8001dd0 <__sfp+0x60>
 8001df2:	bf00      	nop
 8001df4:	08002978 	.word	0x08002978
 8001df8:	ffff0001 	.word	0xffff0001

08001dfc <_fwalk_reent>:
 8001dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e00:	4606      	mov	r6, r0
 8001e02:	4688      	mov	r8, r1
 8001e04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e08:	2700      	movs	r7, #0
 8001e0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e0e:	f1b9 0901 	subs.w	r9, r9, #1
 8001e12:	d505      	bpl.n	8001e20 <_fwalk_reent+0x24>
 8001e14:	6824      	ldr	r4, [r4, #0]
 8001e16:	2c00      	cmp	r4, #0
 8001e18:	d1f7      	bne.n	8001e0a <_fwalk_reent+0xe>
 8001e1a:	4638      	mov	r0, r7
 8001e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e20:	89ab      	ldrh	r3, [r5, #12]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d907      	bls.n	8001e36 <_fwalk_reent+0x3a>
 8001e26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	d003      	beq.n	8001e36 <_fwalk_reent+0x3a>
 8001e2e:	4629      	mov	r1, r5
 8001e30:	4630      	mov	r0, r6
 8001e32:	47c0      	blx	r8
 8001e34:	4307      	orrs	r7, r0
 8001e36:	3568      	adds	r5, #104	; 0x68
 8001e38:	e7e9      	b.n	8001e0e <_fwalk_reent+0x12>

08001e3a <__retarget_lock_init_recursive>:
 8001e3a:	4770      	bx	lr

08001e3c <__retarget_lock_acquire_recursive>:
 8001e3c:	4770      	bx	lr

08001e3e <__retarget_lock_release_recursive>:
 8001e3e:	4770      	bx	lr

08001e40 <_free_r>:
 8001e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e42:	2900      	cmp	r1, #0
 8001e44:	d048      	beq.n	8001ed8 <_free_r+0x98>
 8001e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e4a:	9001      	str	r0, [sp, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8001e52:	bfb8      	it	lt
 8001e54:	18e4      	addlt	r4, r4, r3
 8001e56:	f000 fc2b 	bl	80026b0 <__malloc_lock>
 8001e5a:	4a20      	ldr	r2, [pc, #128]	; (8001edc <_free_r+0x9c>)
 8001e5c:	9801      	ldr	r0, [sp, #4]
 8001e5e:	6813      	ldr	r3, [r2, #0]
 8001e60:	4615      	mov	r5, r2
 8001e62:	b933      	cbnz	r3, 8001e72 <_free_r+0x32>
 8001e64:	6063      	str	r3, [r4, #4]
 8001e66:	6014      	str	r4, [r2, #0]
 8001e68:	b003      	add	sp, #12
 8001e6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e6e:	f000 bc25 	b.w	80026bc <__malloc_unlock>
 8001e72:	42a3      	cmp	r3, r4
 8001e74:	d90b      	bls.n	8001e8e <_free_r+0x4e>
 8001e76:	6821      	ldr	r1, [r4, #0]
 8001e78:	1862      	adds	r2, r4, r1
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	bf04      	itt	eq
 8001e7e:	681a      	ldreq	r2, [r3, #0]
 8001e80:	685b      	ldreq	r3, [r3, #4]
 8001e82:	6063      	str	r3, [r4, #4]
 8001e84:	bf04      	itt	eq
 8001e86:	1852      	addeq	r2, r2, r1
 8001e88:	6022      	streq	r2, [r4, #0]
 8001e8a:	602c      	str	r4, [r5, #0]
 8001e8c:	e7ec      	b.n	8001e68 <_free_r+0x28>
 8001e8e:	461a      	mov	r2, r3
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	b10b      	cbz	r3, 8001e98 <_free_r+0x58>
 8001e94:	42a3      	cmp	r3, r4
 8001e96:	d9fa      	bls.n	8001e8e <_free_r+0x4e>
 8001e98:	6811      	ldr	r1, [r2, #0]
 8001e9a:	1855      	adds	r5, r2, r1
 8001e9c:	42a5      	cmp	r5, r4
 8001e9e:	d10b      	bne.n	8001eb8 <_free_r+0x78>
 8001ea0:	6824      	ldr	r4, [r4, #0]
 8001ea2:	4421      	add	r1, r4
 8001ea4:	1854      	adds	r4, r2, r1
 8001ea6:	42a3      	cmp	r3, r4
 8001ea8:	6011      	str	r1, [r2, #0]
 8001eaa:	d1dd      	bne.n	8001e68 <_free_r+0x28>
 8001eac:	681c      	ldr	r4, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	6053      	str	r3, [r2, #4]
 8001eb2:	4421      	add	r1, r4
 8001eb4:	6011      	str	r1, [r2, #0]
 8001eb6:	e7d7      	b.n	8001e68 <_free_r+0x28>
 8001eb8:	d902      	bls.n	8001ec0 <_free_r+0x80>
 8001eba:	230c      	movs	r3, #12
 8001ebc:	6003      	str	r3, [r0, #0]
 8001ebe:	e7d3      	b.n	8001e68 <_free_r+0x28>
 8001ec0:	6825      	ldr	r5, [r4, #0]
 8001ec2:	1961      	adds	r1, r4, r5
 8001ec4:	428b      	cmp	r3, r1
 8001ec6:	bf04      	itt	eq
 8001ec8:	6819      	ldreq	r1, [r3, #0]
 8001eca:	685b      	ldreq	r3, [r3, #4]
 8001ecc:	6063      	str	r3, [r4, #4]
 8001ece:	bf04      	itt	eq
 8001ed0:	1949      	addeq	r1, r1, r5
 8001ed2:	6021      	streq	r1, [r4, #0]
 8001ed4:	6054      	str	r4, [r2, #4]
 8001ed6:	e7c7      	b.n	8001e68 <_free_r+0x28>
 8001ed8:	b003      	add	sp, #12
 8001eda:	bd30      	pop	{r4, r5, pc}
 8001edc:	20000094 	.word	0x20000094

08001ee0 <_malloc_r>:
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	1ccd      	adds	r5, r1, #3
 8001ee4:	f025 0503 	bic.w	r5, r5, #3
 8001ee8:	3508      	adds	r5, #8
 8001eea:	2d0c      	cmp	r5, #12
 8001eec:	bf38      	it	cc
 8001eee:	250c      	movcc	r5, #12
 8001ef0:	2d00      	cmp	r5, #0
 8001ef2:	4606      	mov	r6, r0
 8001ef4:	db01      	blt.n	8001efa <_malloc_r+0x1a>
 8001ef6:	42a9      	cmp	r1, r5
 8001ef8:	d903      	bls.n	8001f02 <_malloc_r+0x22>
 8001efa:	230c      	movs	r3, #12
 8001efc:	6033      	str	r3, [r6, #0]
 8001efe:	2000      	movs	r0, #0
 8001f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f02:	f000 fbd5 	bl	80026b0 <__malloc_lock>
 8001f06:	4921      	ldr	r1, [pc, #132]	; (8001f8c <_malloc_r+0xac>)
 8001f08:	680a      	ldr	r2, [r1, #0]
 8001f0a:	4614      	mov	r4, r2
 8001f0c:	b99c      	cbnz	r4, 8001f36 <_malloc_r+0x56>
 8001f0e:	4f20      	ldr	r7, [pc, #128]	; (8001f90 <_malloc_r+0xb0>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b923      	cbnz	r3, 8001f1e <_malloc_r+0x3e>
 8001f14:	4621      	mov	r1, r4
 8001f16:	4630      	mov	r0, r6
 8001f18:	f000 fb2c 	bl	8002574 <_sbrk_r>
 8001f1c:	6038      	str	r0, [r7, #0]
 8001f1e:	4629      	mov	r1, r5
 8001f20:	4630      	mov	r0, r6
 8001f22:	f000 fb27 	bl	8002574 <_sbrk_r>
 8001f26:	1c43      	adds	r3, r0, #1
 8001f28:	d123      	bne.n	8001f72 <_malloc_r+0x92>
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	6033      	str	r3, [r6, #0]
 8001f2e:	4630      	mov	r0, r6
 8001f30:	f000 fbc4 	bl	80026bc <__malloc_unlock>
 8001f34:	e7e3      	b.n	8001efe <_malloc_r+0x1e>
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	1b5b      	subs	r3, r3, r5
 8001f3a:	d417      	bmi.n	8001f6c <_malloc_r+0x8c>
 8001f3c:	2b0b      	cmp	r3, #11
 8001f3e:	d903      	bls.n	8001f48 <_malloc_r+0x68>
 8001f40:	6023      	str	r3, [r4, #0]
 8001f42:	441c      	add	r4, r3
 8001f44:	6025      	str	r5, [r4, #0]
 8001f46:	e004      	b.n	8001f52 <_malloc_r+0x72>
 8001f48:	6863      	ldr	r3, [r4, #4]
 8001f4a:	42a2      	cmp	r2, r4
 8001f4c:	bf0c      	ite	eq
 8001f4e:	600b      	streq	r3, [r1, #0]
 8001f50:	6053      	strne	r3, [r2, #4]
 8001f52:	4630      	mov	r0, r6
 8001f54:	f000 fbb2 	bl	80026bc <__malloc_unlock>
 8001f58:	f104 000b 	add.w	r0, r4, #11
 8001f5c:	1d23      	adds	r3, r4, #4
 8001f5e:	f020 0007 	bic.w	r0, r0, #7
 8001f62:	1ac2      	subs	r2, r0, r3
 8001f64:	d0cc      	beq.n	8001f00 <_malloc_r+0x20>
 8001f66:	1a1b      	subs	r3, r3, r0
 8001f68:	50a3      	str	r3, [r4, r2]
 8001f6a:	e7c9      	b.n	8001f00 <_malloc_r+0x20>
 8001f6c:	4622      	mov	r2, r4
 8001f6e:	6864      	ldr	r4, [r4, #4]
 8001f70:	e7cc      	b.n	8001f0c <_malloc_r+0x2c>
 8001f72:	1cc4      	adds	r4, r0, #3
 8001f74:	f024 0403 	bic.w	r4, r4, #3
 8001f78:	42a0      	cmp	r0, r4
 8001f7a:	d0e3      	beq.n	8001f44 <_malloc_r+0x64>
 8001f7c:	1a21      	subs	r1, r4, r0
 8001f7e:	4630      	mov	r0, r6
 8001f80:	f000 faf8 	bl	8002574 <_sbrk_r>
 8001f84:	3001      	adds	r0, #1
 8001f86:	d1dd      	bne.n	8001f44 <_malloc_r+0x64>
 8001f88:	e7cf      	b.n	8001f2a <_malloc_r+0x4a>
 8001f8a:	bf00      	nop
 8001f8c:	20000094 	.word	0x20000094
 8001f90:	20000098 	.word	0x20000098

08001f94 <__ssputs_r>:
 8001f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f98:	688e      	ldr	r6, [r1, #8]
 8001f9a:	429e      	cmp	r6, r3
 8001f9c:	4682      	mov	sl, r0
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	4690      	mov	r8, r2
 8001fa2:	461f      	mov	r7, r3
 8001fa4:	d838      	bhi.n	8002018 <__ssputs_r+0x84>
 8001fa6:	898a      	ldrh	r2, [r1, #12]
 8001fa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001fac:	d032      	beq.n	8002014 <__ssputs_r+0x80>
 8001fae:	6825      	ldr	r5, [r4, #0]
 8001fb0:	6909      	ldr	r1, [r1, #16]
 8001fb2:	eba5 0901 	sub.w	r9, r5, r1
 8001fb6:	6965      	ldr	r5, [r4, #20]
 8001fb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	444b      	add	r3, r9
 8001fc4:	106d      	asrs	r5, r5, #1
 8001fc6:	429d      	cmp	r5, r3
 8001fc8:	bf38      	it	cc
 8001fca:	461d      	movcc	r5, r3
 8001fcc:	0553      	lsls	r3, r2, #21
 8001fce:	d531      	bpl.n	8002034 <__ssputs_r+0xa0>
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	f7ff ff85 	bl	8001ee0 <_malloc_r>
 8001fd6:	4606      	mov	r6, r0
 8001fd8:	b950      	cbnz	r0, 8001ff0 <__ssputs_r+0x5c>
 8001fda:	230c      	movs	r3, #12
 8001fdc:	f8ca 3000 	str.w	r3, [sl]
 8001fe0:	89a3      	ldrh	r3, [r4, #12]
 8001fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe6:	81a3      	strh	r3, [r4, #12]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ff0:	6921      	ldr	r1, [r4, #16]
 8001ff2:	464a      	mov	r2, r9
 8001ff4:	f000 fb34 	bl	8002660 <memcpy>
 8001ff8:	89a3      	ldrh	r3, [r4, #12]
 8001ffa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002002:	81a3      	strh	r3, [r4, #12]
 8002004:	6126      	str	r6, [r4, #16]
 8002006:	6165      	str	r5, [r4, #20]
 8002008:	444e      	add	r6, r9
 800200a:	eba5 0509 	sub.w	r5, r5, r9
 800200e:	6026      	str	r6, [r4, #0]
 8002010:	60a5      	str	r5, [r4, #8]
 8002012:	463e      	mov	r6, r7
 8002014:	42be      	cmp	r6, r7
 8002016:	d900      	bls.n	800201a <__ssputs_r+0x86>
 8002018:	463e      	mov	r6, r7
 800201a:	4632      	mov	r2, r6
 800201c:	6820      	ldr	r0, [r4, #0]
 800201e:	4641      	mov	r1, r8
 8002020:	f000 fb2c 	bl	800267c <memmove>
 8002024:	68a3      	ldr	r3, [r4, #8]
 8002026:	6822      	ldr	r2, [r4, #0]
 8002028:	1b9b      	subs	r3, r3, r6
 800202a:	4432      	add	r2, r6
 800202c:	60a3      	str	r3, [r4, #8]
 800202e:	6022      	str	r2, [r4, #0]
 8002030:	2000      	movs	r0, #0
 8002032:	e7db      	b.n	8001fec <__ssputs_r+0x58>
 8002034:	462a      	mov	r2, r5
 8002036:	f000 fb47 	bl	80026c8 <_realloc_r>
 800203a:	4606      	mov	r6, r0
 800203c:	2800      	cmp	r0, #0
 800203e:	d1e1      	bne.n	8002004 <__ssputs_r+0x70>
 8002040:	6921      	ldr	r1, [r4, #16]
 8002042:	4650      	mov	r0, sl
 8002044:	f7ff fefc 	bl	8001e40 <_free_r>
 8002048:	e7c7      	b.n	8001fda <__ssputs_r+0x46>
	...

0800204c <_svfiprintf_r>:
 800204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002050:	4698      	mov	r8, r3
 8002052:	898b      	ldrh	r3, [r1, #12]
 8002054:	061b      	lsls	r3, r3, #24
 8002056:	b09d      	sub	sp, #116	; 0x74
 8002058:	4607      	mov	r7, r0
 800205a:	460d      	mov	r5, r1
 800205c:	4614      	mov	r4, r2
 800205e:	d50e      	bpl.n	800207e <_svfiprintf_r+0x32>
 8002060:	690b      	ldr	r3, [r1, #16]
 8002062:	b963      	cbnz	r3, 800207e <_svfiprintf_r+0x32>
 8002064:	2140      	movs	r1, #64	; 0x40
 8002066:	f7ff ff3b 	bl	8001ee0 <_malloc_r>
 800206a:	6028      	str	r0, [r5, #0]
 800206c:	6128      	str	r0, [r5, #16]
 800206e:	b920      	cbnz	r0, 800207a <_svfiprintf_r+0x2e>
 8002070:	230c      	movs	r3, #12
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	e0d1      	b.n	800221e <_svfiprintf_r+0x1d2>
 800207a:	2340      	movs	r3, #64	; 0x40
 800207c:	616b      	str	r3, [r5, #20]
 800207e:	2300      	movs	r3, #0
 8002080:	9309      	str	r3, [sp, #36]	; 0x24
 8002082:	2320      	movs	r3, #32
 8002084:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002088:	f8cd 800c 	str.w	r8, [sp, #12]
 800208c:	2330      	movs	r3, #48	; 0x30
 800208e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002238 <_svfiprintf_r+0x1ec>
 8002092:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002096:	f04f 0901 	mov.w	r9, #1
 800209a:	4623      	mov	r3, r4
 800209c:	469a      	mov	sl, r3
 800209e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020a2:	b10a      	cbz	r2, 80020a8 <_svfiprintf_r+0x5c>
 80020a4:	2a25      	cmp	r2, #37	; 0x25
 80020a6:	d1f9      	bne.n	800209c <_svfiprintf_r+0x50>
 80020a8:	ebba 0b04 	subs.w	fp, sl, r4
 80020ac:	d00b      	beq.n	80020c6 <_svfiprintf_r+0x7a>
 80020ae:	465b      	mov	r3, fp
 80020b0:	4622      	mov	r2, r4
 80020b2:	4629      	mov	r1, r5
 80020b4:	4638      	mov	r0, r7
 80020b6:	f7ff ff6d 	bl	8001f94 <__ssputs_r>
 80020ba:	3001      	adds	r0, #1
 80020bc:	f000 80aa 	beq.w	8002214 <_svfiprintf_r+0x1c8>
 80020c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020c2:	445a      	add	r2, fp
 80020c4:	9209      	str	r2, [sp, #36]	; 0x24
 80020c6:	f89a 3000 	ldrb.w	r3, [sl]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80a2 	beq.w	8002214 <_svfiprintf_r+0x1c8>
 80020d0:	2300      	movs	r3, #0
 80020d2:	f04f 32ff 	mov.w	r2, #4294967295
 80020d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020da:	f10a 0a01 	add.w	sl, sl, #1
 80020de:	9304      	str	r3, [sp, #16]
 80020e0:	9307      	str	r3, [sp, #28]
 80020e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020e6:	931a      	str	r3, [sp, #104]	; 0x68
 80020e8:	4654      	mov	r4, sl
 80020ea:	2205      	movs	r2, #5
 80020ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020f0:	4851      	ldr	r0, [pc, #324]	; (8002238 <_svfiprintf_r+0x1ec>)
 80020f2:	f7fe f885 	bl	8000200 <memchr>
 80020f6:	9a04      	ldr	r2, [sp, #16]
 80020f8:	b9d8      	cbnz	r0, 8002132 <_svfiprintf_r+0xe6>
 80020fa:	06d0      	lsls	r0, r2, #27
 80020fc:	bf44      	itt	mi
 80020fe:	2320      	movmi	r3, #32
 8002100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002104:	0711      	lsls	r1, r2, #28
 8002106:	bf44      	itt	mi
 8002108:	232b      	movmi	r3, #43	; 0x2b
 800210a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800210e:	f89a 3000 	ldrb.w	r3, [sl]
 8002112:	2b2a      	cmp	r3, #42	; 0x2a
 8002114:	d015      	beq.n	8002142 <_svfiprintf_r+0xf6>
 8002116:	9a07      	ldr	r2, [sp, #28]
 8002118:	4654      	mov	r4, sl
 800211a:	2000      	movs	r0, #0
 800211c:	f04f 0c0a 	mov.w	ip, #10
 8002120:	4621      	mov	r1, r4
 8002122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002126:	3b30      	subs	r3, #48	; 0x30
 8002128:	2b09      	cmp	r3, #9
 800212a:	d94e      	bls.n	80021ca <_svfiprintf_r+0x17e>
 800212c:	b1b0      	cbz	r0, 800215c <_svfiprintf_r+0x110>
 800212e:	9207      	str	r2, [sp, #28]
 8002130:	e014      	b.n	800215c <_svfiprintf_r+0x110>
 8002132:	eba0 0308 	sub.w	r3, r0, r8
 8002136:	fa09 f303 	lsl.w	r3, r9, r3
 800213a:	4313      	orrs	r3, r2
 800213c:	9304      	str	r3, [sp, #16]
 800213e:	46a2      	mov	sl, r4
 8002140:	e7d2      	b.n	80020e8 <_svfiprintf_r+0x9c>
 8002142:	9b03      	ldr	r3, [sp, #12]
 8002144:	1d19      	adds	r1, r3, #4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	9103      	str	r1, [sp, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	bfbb      	ittet	lt
 800214e:	425b      	neglt	r3, r3
 8002150:	f042 0202 	orrlt.w	r2, r2, #2
 8002154:	9307      	strge	r3, [sp, #28]
 8002156:	9307      	strlt	r3, [sp, #28]
 8002158:	bfb8      	it	lt
 800215a:	9204      	strlt	r2, [sp, #16]
 800215c:	7823      	ldrb	r3, [r4, #0]
 800215e:	2b2e      	cmp	r3, #46	; 0x2e
 8002160:	d10c      	bne.n	800217c <_svfiprintf_r+0x130>
 8002162:	7863      	ldrb	r3, [r4, #1]
 8002164:	2b2a      	cmp	r3, #42	; 0x2a
 8002166:	d135      	bne.n	80021d4 <_svfiprintf_r+0x188>
 8002168:	9b03      	ldr	r3, [sp, #12]
 800216a:	1d1a      	adds	r2, r3, #4
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	9203      	str	r2, [sp, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	bfb8      	it	lt
 8002174:	f04f 33ff 	movlt.w	r3, #4294967295
 8002178:	3402      	adds	r4, #2
 800217a:	9305      	str	r3, [sp, #20]
 800217c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002248 <_svfiprintf_r+0x1fc>
 8002180:	7821      	ldrb	r1, [r4, #0]
 8002182:	2203      	movs	r2, #3
 8002184:	4650      	mov	r0, sl
 8002186:	f7fe f83b 	bl	8000200 <memchr>
 800218a:	b140      	cbz	r0, 800219e <_svfiprintf_r+0x152>
 800218c:	2340      	movs	r3, #64	; 0x40
 800218e:	eba0 000a 	sub.w	r0, r0, sl
 8002192:	fa03 f000 	lsl.w	r0, r3, r0
 8002196:	9b04      	ldr	r3, [sp, #16]
 8002198:	4303      	orrs	r3, r0
 800219a:	3401      	adds	r4, #1
 800219c:	9304      	str	r3, [sp, #16]
 800219e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021a2:	4826      	ldr	r0, [pc, #152]	; (800223c <_svfiprintf_r+0x1f0>)
 80021a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021a8:	2206      	movs	r2, #6
 80021aa:	f7fe f829 	bl	8000200 <memchr>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d038      	beq.n	8002224 <_svfiprintf_r+0x1d8>
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <_svfiprintf_r+0x1f4>)
 80021b4:	bb1b      	cbnz	r3, 80021fe <_svfiprintf_r+0x1b2>
 80021b6:	9b03      	ldr	r3, [sp, #12]
 80021b8:	3307      	adds	r3, #7
 80021ba:	f023 0307 	bic.w	r3, r3, #7
 80021be:	3308      	adds	r3, #8
 80021c0:	9303      	str	r3, [sp, #12]
 80021c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021c4:	4433      	add	r3, r6
 80021c6:	9309      	str	r3, [sp, #36]	; 0x24
 80021c8:	e767      	b.n	800209a <_svfiprintf_r+0x4e>
 80021ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80021ce:	460c      	mov	r4, r1
 80021d0:	2001      	movs	r0, #1
 80021d2:	e7a5      	b.n	8002120 <_svfiprintf_r+0xd4>
 80021d4:	2300      	movs	r3, #0
 80021d6:	3401      	adds	r4, #1
 80021d8:	9305      	str	r3, [sp, #20]
 80021da:	4619      	mov	r1, r3
 80021dc:	f04f 0c0a 	mov.w	ip, #10
 80021e0:	4620      	mov	r0, r4
 80021e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021e6:	3a30      	subs	r2, #48	; 0x30
 80021e8:	2a09      	cmp	r2, #9
 80021ea:	d903      	bls.n	80021f4 <_svfiprintf_r+0x1a8>
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0c5      	beq.n	800217c <_svfiprintf_r+0x130>
 80021f0:	9105      	str	r1, [sp, #20]
 80021f2:	e7c3      	b.n	800217c <_svfiprintf_r+0x130>
 80021f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80021f8:	4604      	mov	r4, r0
 80021fa:	2301      	movs	r3, #1
 80021fc:	e7f0      	b.n	80021e0 <_svfiprintf_r+0x194>
 80021fe:	ab03      	add	r3, sp, #12
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	462a      	mov	r2, r5
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <_svfiprintf_r+0x1f8>)
 8002206:	a904      	add	r1, sp, #16
 8002208:	4638      	mov	r0, r7
 800220a:	f3af 8000 	nop.w
 800220e:	1c42      	adds	r2, r0, #1
 8002210:	4606      	mov	r6, r0
 8002212:	d1d6      	bne.n	80021c2 <_svfiprintf_r+0x176>
 8002214:	89ab      	ldrh	r3, [r5, #12]
 8002216:	065b      	lsls	r3, r3, #25
 8002218:	f53f af2c 	bmi.w	8002074 <_svfiprintf_r+0x28>
 800221c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800221e:	b01d      	add	sp, #116	; 0x74
 8002220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002224:	ab03      	add	r3, sp, #12
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	462a      	mov	r2, r5
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <_svfiprintf_r+0x1f8>)
 800222c:	a904      	add	r1, sp, #16
 800222e:	4638      	mov	r0, r7
 8002230:	f000 f87a 	bl	8002328 <_printf_i>
 8002234:	e7eb      	b.n	800220e <_svfiprintf_r+0x1c2>
 8002236:	bf00      	nop
 8002238:	08003078 	.word	0x08003078
 800223c:	08003082 	.word	0x08003082
 8002240:	00000000 	.word	0x00000000
 8002244:	08001f95 	.word	0x08001f95
 8002248:	0800307e 	.word	0x0800307e

0800224c <_printf_common>:
 800224c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002250:	4616      	mov	r6, r2
 8002252:	4699      	mov	r9, r3
 8002254:	688a      	ldr	r2, [r1, #8]
 8002256:	690b      	ldr	r3, [r1, #16]
 8002258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800225c:	4293      	cmp	r3, r2
 800225e:	bfb8      	it	lt
 8002260:	4613      	movlt	r3, r2
 8002262:	6033      	str	r3, [r6, #0]
 8002264:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002268:	4607      	mov	r7, r0
 800226a:	460c      	mov	r4, r1
 800226c:	b10a      	cbz	r2, 8002272 <_printf_common+0x26>
 800226e:	3301      	adds	r3, #1
 8002270:	6033      	str	r3, [r6, #0]
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	0699      	lsls	r1, r3, #26
 8002276:	bf42      	ittt	mi
 8002278:	6833      	ldrmi	r3, [r6, #0]
 800227a:	3302      	addmi	r3, #2
 800227c:	6033      	strmi	r3, [r6, #0]
 800227e:	6825      	ldr	r5, [r4, #0]
 8002280:	f015 0506 	ands.w	r5, r5, #6
 8002284:	d106      	bne.n	8002294 <_printf_common+0x48>
 8002286:	f104 0a19 	add.w	sl, r4, #25
 800228a:	68e3      	ldr	r3, [r4, #12]
 800228c:	6832      	ldr	r2, [r6, #0]
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	42ab      	cmp	r3, r5
 8002292:	dc26      	bgt.n	80022e2 <_printf_common+0x96>
 8002294:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002298:	1e13      	subs	r3, r2, #0
 800229a:	6822      	ldr	r2, [r4, #0]
 800229c:	bf18      	it	ne
 800229e:	2301      	movne	r3, #1
 80022a0:	0692      	lsls	r2, r2, #26
 80022a2:	d42b      	bmi.n	80022fc <_printf_common+0xb0>
 80022a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022a8:	4649      	mov	r1, r9
 80022aa:	4638      	mov	r0, r7
 80022ac:	47c0      	blx	r8
 80022ae:	3001      	adds	r0, #1
 80022b0:	d01e      	beq.n	80022f0 <_printf_common+0xa4>
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	68e5      	ldr	r5, [r4, #12]
 80022b6:	6832      	ldr	r2, [r6, #0]
 80022b8:	f003 0306 	and.w	r3, r3, #6
 80022bc:	2b04      	cmp	r3, #4
 80022be:	bf08      	it	eq
 80022c0:	1aad      	subeq	r5, r5, r2
 80022c2:	68a3      	ldr	r3, [r4, #8]
 80022c4:	6922      	ldr	r2, [r4, #16]
 80022c6:	bf0c      	ite	eq
 80022c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022cc:	2500      	movne	r5, #0
 80022ce:	4293      	cmp	r3, r2
 80022d0:	bfc4      	itt	gt
 80022d2:	1a9b      	subgt	r3, r3, r2
 80022d4:	18ed      	addgt	r5, r5, r3
 80022d6:	2600      	movs	r6, #0
 80022d8:	341a      	adds	r4, #26
 80022da:	42b5      	cmp	r5, r6
 80022dc:	d11a      	bne.n	8002314 <_printf_common+0xc8>
 80022de:	2000      	movs	r0, #0
 80022e0:	e008      	b.n	80022f4 <_printf_common+0xa8>
 80022e2:	2301      	movs	r3, #1
 80022e4:	4652      	mov	r2, sl
 80022e6:	4649      	mov	r1, r9
 80022e8:	4638      	mov	r0, r7
 80022ea:	47c0      	blx	r8
 80022ec:	3001      	adds	r0, #1
 80022ee:	d103      	bne.n	80022f8 <_printf_common+0xac>
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022f8:	3501      	adds	r5, #1
 80022fa:	e7c6      	b.n	800228a <_printf_common+0x3e>
 80022fc:	18e1      	adds	r1, r4, r3
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	2030      	movs	r0, #48	; 0x30
 8002302:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002306:	4422      	add	r2, r4
 8002308:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800230c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002310:	3302      	adds	r3, #2
 8002312:	e7c7      	b.n	80022a4 <_printf_common+0x58>
 8002314:	2301      	movs	r3, #1
 8002316:	4622      	mov	r2, r4
 8002318:	4649      	mov	r1, r9
 800231a:	4638      	mov	r0, r7
 800231c:	47c0      	blx	r8
 800231e:	3001      	adds	r0, #1
 8002320:	d0e6      	beq.n	80022f0 <_printf_common+0xa4>
 8002322:	3601      	adds	r6, #1
 8002324:	e7d9      	b.n	80022da <_printf_common+0x8e>
	...

08002328 <_printf_i>:
 8002328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800232c:	460c      	mov	r4, r1
 800232e:	4691      	mov	r9, r2
 8002330:	7e27      	ldrb	r7, [r4, #24]
 8002332:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002334:	2f78      	cmp	r7, #120	; 0x78
 8002336:	4680      	mov	r8, r0
 8002338:	469a      	mov	sl, r3
 800233a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800233e:	d807      	bhi.n	8002350 <_printf_i+0x28>
 8002340:	2f62      	cmp	r7, #98	; 0x62
 8002342:	d80a      	bhi.n	800235a <_printf_i+0x32>
 8002344:	2f00      	cmp	r7, #0
 8002346:	f000 80d8 	beq.w	80024fa <_printf_i+0x1d2>
 800234a:	2f58      	cmp	r7, #88	; 0x58
 800234c:	f000 80a3 	beq.w	8002496 <_printf_i+0x16e>
 8002350:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002358:	e03a      	b.n	80023d0 <_printf_i+0xa8>
 800235a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800235e:	2b15      	cmp	r3, #21
 8002360:	d8f6      	bhi.n	8002350 <_printf_i+0x28>
 8002362:	a001      	add	r0, pc, #4	; (adr r0, 8002368 <_printf_i+0x40>)
 8002364:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002368:	080023c1 	.word	0x080023c1
 800236c:	080023d5 	.word	0x080023d5
 8002370:	08002351 	.word	0x08002351
 8002374:	08002351 	.word	0x08002351
 8002378:	08002351 	.word	0x08002351
 800237c:	08002351 	.word	0x08002351
 8002380:	080023d5 	.word	0x080023d5
 8002384:	08002351 	.word	0x08002351
 8002388:	08002351 	.word	0x08002351
 800238c:	08002351 	.word	0x08002351
 8002390:	08002351 	.word	0x08002351
 8002394:	080024e1 	.word	0x080024e1
 8002398:	08002405 	.word	0x08002405
 800239c:	080024c3 	.word	0x080024c3
 80023a0:	08002351 	.word	0x08002351
 80023a4:	08002351 	.word	0x08002351
 80023a8:	08002503 	.word	0x08002503
 80023ac:	08002351 	.word	0x08002351
 80023b0:	08002405 	.word	0x08002405
 80023b4:	08002351 	.word	0x08002351
 80023b8:	08002351 	.word	0x08002351
 80023bc:	080024cb 	.word	0x080024cb
 80023c0:	680b      	ldr	r3, [r1, #0]
 80023c2:	1d1a      	adds	r2, r3, #4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	600a      	str	r2, [r1, #0]
 80023c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80023cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0a3      	b.n	800251c <_printf_i+0x1f4>
 80023d4:	6825      	ldr	r5, [r4, #0]
 80023d6:	6808      	ldr	r0, [r1, #0]
 80023d8:	062e      	lsls	r6, r5, #24
 80023da:	f100 0304 	add.w	r3, r0, #4
 80023de:	d50a      	bpl.n	80023f6 <_printf_i+0xce>
 80023e0:	6805      	ldr	r5, [r0, #0]
 80023e2:	600b      	str	r3, [r1, #0]
 80023e4:	2d00      	cmp	r5, #0
 80023e6:	da03      	bge.n	80023f0 <_printf_i+0xc8>
 80023e8:	232d      	movs	r3, #45	; 0x2d
 80023ea:	426d      	negs	r5, r5
 80023ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023f0:	485e      	ldr	r0, [pc, #376]	; (800256c <_printf_i+0x244>)
 80023f2:	230a      	movs	r3, #10
 80023f4:	e019      	b.n	800242a <_printf_i+0x102>
 80023f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80023fa:	6805      	ldr	r5, [r0, #0]
 80023fc:	600b      	str	r3, [r1, #0]
 80023fe:	bf18      	it	ne
 8002400:	b22d      	sxthne	r5, r5
 8002402:	e7ef      	b.n	80023e4 <_printf_i+0xbc>
 8002404:	680b      	ldr	r3, [r1, #0]
 8002406:	6825      	ldr	r5, [r4, #0]
 8002408:	1d18      	adds	r0, r3, #4
 800240a:	6008      	str	r0, [r1, #0]
 800240c:	0628      	lsls	r0, r5, #24
 800240e:	d501      	bpl.n	8002414 <_printf_i+0xec>
 8002410:	681d      	ldr	r5, [r3, #0]
 8002412:	e002      	b.n	800241a <_printf_i+0xf2>
 8002414:	0669      	lsls	r1, r5, #25
 8002416:	d5fb      	bpl.n	8002410 <_printf_i+0xe8>
 8002418:	881d      	ldrh	r5, [r3, #0]
 800241a:	4854      	ldr	r0, [pc, #336]	; (800256c <_printf_i+0x244>)
 800241c:	2f6f      	cmp	r7, #111	; 0x6f
 800241e:	bf0c      	ite	eq
 8002420:	2308      	moveq	r3, #8
 8002422:	230a      	movne	r3, #10
 8002424:	2100      	movs	r1, #0
 8002426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800242a:	6866      	ldr	r6, [r4, #4]
 800242c:	60a6      	str	r6, [r4, #8]
 800242e:	2e00      	cmp	r6, #0
 8002430:	bfa2      	ittt	ge
 8002432:	6821      	ldrge	r1, [r4, #0]
 8002434:	f021 0104 	bicge.w	r1, r1, #4
 8002438:	6021      	strge	r1, [r4, #0]
 800243a:	b90d      	cbnz	r5, 8002440 <_printf_i+0x118>
 800243c:	2e00      	cmp	r6, #0
 800243e:	d04d      	beq.n	80024dc <_printf_i+0x1b4>
 8002440:	4616      	mov	r6, r2
 8002442:	fbb5 f1f3 	udiv	r1, r5, r3
 8002446:	fb03 5711 	mls	r7, r3, r1, r5
 800244a:	5dc7      	ldrb	r7, [r0, r7]
 800244c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002450:	462f      	mov	r7, r5
 8002452:	42bb      	cmp	r3, r7
 8002454:	460d      	mov	r5, r1
 8002456:	d9f4      	bls.n	8002442 <_printf_i+0x11a>
 8002458:	2b08      	cmp	r3, #8
 800245a:	d10b      	bne.n	8002474 <_printf_i+0x14c>
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	07df      	lsls	r7, r3, #31
 8002460:	d508      	bpl.n	8002474 <_printf_i+0x14c>
 8002462:	6923      	ldr	r3, [r4, #16]
 8002464:	6861      	ldr	r1, [r4, #4]
 8002466:	4299      	cmp	r1, r3
 8002468:	bfde      	ittt	le
 800246a:	2330      	movle	r3, #48	; 0x30
 800246c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002470:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002474:	1b92      	subs	r2, r2, r6
 8002476:	6122      	str	r2, [r4, #16]
 8002478:	f8cd a000 	str.w	sl, [sp]
 800247c:	464b      	mov	r3, r9
 800247e:	aa03      	add	r2, sp, #12
 8002480:	4621      	mov	r1, r4
 8002482:	4640      	mov	r0, r8
 8002484:	f7ff fee2 	bl	800224c <_printf_common>
 8002488:	3001      	adds	r0, #1
 800248a:	d14c      	bne.n	8002526 <_printf_i+0x1fe>
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	b004      	add	sp, #16
 8002492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002496:	4835      	ldr	r0, [pc, #212]	; (800256c <_printf_i+0x244>)
 8002498:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	680e      	ldr	r6, [r1, #0]
 80024a0:	061f      	lsls	r7, r3, #24
 80024a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80024a6:	600e      	str	r6, [r1, #0]
 80024a8:	d514      	bpl.n	80024d4 <_printf_i+0x1ac>
 80024aa:	07d9      	lsls	r1, r3, #31
 80024ac:	bf44      	itt	mi
 80024ae:	f043 0320 	orrmi.w	r3, r3, #32
 80024b2:	6023      	strmi	r3, [r4, #0]
 80024b4:	b91d      	cbnz	r5, 80024be <_printf_i+0x196>
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	f023 0320 	bic.w	r3, r3, #32
 80024bc:	6023      	str	r3, [r4, #0]
 80024be:	2310      	movs	r3, #16
 80024c0:	e7b0      	b.n	8002424 <_printf_i+0xfc>
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	f043 0320 	orr.w	r3, r3, #32
 80024c8:	6023      	str	r3, [r4, #0]
 80024ca:	2378      	movs	r3, #120	; 0x78
 80024cc:	4828      	ldr	r0, [pc, #160]	; (8002570 <_printf_i+0x248>)
 80024ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024d2:	e7e3      	b.n	800249c <_printf_i+0x174>
 80024d4:	065e      	lsls	r6, r3, #25
 80024d6:	bf48      	it	mi
 80024d8:	b2ad      	uxthmi	r5, r5
 80024da:	e7e6      	b.n	80024aa <_printf_i+0x182>
 80024dc:	4616      	mov	r6, r2
 80024de:	e7bb      	b.n	8002458 <_printf_i+0x130>
 80024e0:	680b      	ldr	r3, [r1, #0]
 80024e2:	6826      	ldr	r6, [r4, #0]
 80024e4:	6960      	ldr	r0, [r4, #20]
 80024e6:	1d1d      	adds	r5, r3, #4
 80024e8:	600d      	str	r5, [r1, #0]
 80024ea:	0635      	lsls	r5, r6, #24
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	d501      	bpl.n	80024f4 <_printf_i+0x1cc>
 80024f0:	6018      	str	r0, [r3, #0]
 80024f2:	e002      	b.n	80024fa <_printf_i+0x1d2>
 80024f4:	0671      	lsls	r1, r6, #25
 80024f6:	d5fb      	bpl.n	80024f0 <_printf_i+0x1c8>
 80024f8:	8018      	strh	r0, [r3, #0]
 80024fa:	2300      	movs	r3, #0
 80024fc:	6123      	str	r3, [r4, #16]
 80024fe:	4616      	mov	r6, r2
 8002500:	e7ba      	b.n	8002478 <_printf_i+0x150>
 8002502:	680b      	ldr	r3, [r1, #0]
 8002504:	1d1a      	adds	r2, r3, #4
 8002506:	600a      	str	r2, [r1, #0]
 8002508:	681e      	ldr	r6, [r3, #0]
 800250a:	6862      	ldr	r2, [r4, #4]
 800250c:	2100      	movs	r1, #0
 800250e:	4630      	mov	r0, r6
 8002510:	f7fd fe76 	bl	8000200 <memchr>
 8002514:	b108      	cbz	r0, 800251a <_printf_i+0x1f2>
 8002516:	1b80      	subs	r0, r0, r6
 8002518:	6060      	str	r0, [r4, #4]
 800251a:	6863      	ldr	r3, [r4, #4]
 800251c:	6123      	str	r3, [r4, #16]
 800251e:	2300      	movs	r3, #0
 8002520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002524:	e7a8      	b.n	8002478 <_printf_i+0x150>
 8002526:	6923      	ldr	r3, [r4, #16]
 8002528:	4632      	mov	r2, r6
 800252a:	4649      	mov	r1, r9
 800252c:	4640      	mov	r0, r8
 800252e:	47d0      	blx	sl
 8002530:	3001      	adds	r0, #1
 8002532:	d0ab      	beq.n	800248c <_printf_i+0x164>
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	079b      	lsls	r3, r3, #30
 8002538:	d413      	bmi.n	8002562 <_printf_i+0x23a>
 800253a:	68e0      	ldr	r0, [r4, #12]
 800253c:	9b03      	ldr	r3, [sp, #12]
 800253e:	4298      	cmp	r0, r3
 8002540:	bfb8      	it	lt
 8002542:	4618      	movlt	r0, r3
 8002544:	e7a4      	b.n	8002490 <_printf_i+0x168>
 8002546:	2301      	movs	r3, #1
 8002548:	4632      	mov	r2, r6
 800254a:	4649      	mov	r1, r9
 800254c:	4640      	mov	r0, r8
 800254e:	47d0      	blx	sl
 8002550:	3001      	adds	r0, #1
 8002552:	d09b      	beq.n	800248c <_printf_i+0x164>
 8002554:	3501      	adds	r5, #1
 8002556:	68e3      	ldr	r3, [r4, #12]
 8002558:	9903      	ldr	r1, [sp, #12]
 800255a:	1a5b      	subs	r3, r3, r1
 800255c:	42ab      	cmp	r3, r5
 800255e:	dcf2      	bgt.n	8002546 <_printf_i+0x21e>
 8002560:	e7eb      	b.n	800253a <_printf_i+0x212>
 8002562:	2500      	movs	r5, #0
 8002564:	f104 0619 	add.w	r6, r4, #25
 8002568:	e7f5      	b.n	8002556 <_printf_i+0x22e>
 800256a:	bf00      	nop
 800256c:	08003089 	.word	0x08003089
 8002570:	0800309a 	.word	0x0800309a

08002574 <_sbrk_r>:
 8002574:	b538      	push	{r3, r4, r5, lr}
 8002576:	4d06      	ldr	r5, [pc, #24]	; (8002590 <_sbrk_r+0x1c>)
 8002578:	2300      	movs	r3, #0
 800257a:	4604      	mov	r4, r0
 800257c:	4608      	mov	r0, r1
 800257e:	602b      	str	r3, [r5, #0]
 8002580:	f7fe fd0c 	bl	8000f9c <_sbrk>
 8002584:	1c43      	adds	r3, r0, #1
 8002586:	d102      	bne.n	800258e <_sbrk_r+0x1a>
 8002588:	682b      	ldr	r3, [r5, #0]
 800258a:	b103      	cbz	r3, 800258e <_sbrk_r+0x1a>
 800258c:	6023      	str	r3, [r4, #0]
 800258e:	bd38      	pop	{r3, r4, r5, pc}
 8002590:	200000d8 	.word	0x200000d8

08002594 <__sread>:
 8002594:	b510      	push	{r4, lr}
 8002596:	460c      	mov	r4, r1
 8002598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800259c:	f000 f8ba 	bl	8002714 <_read_r>
 80025a0:	2800      	cmp	r0, #0
 80025a2:	bfab      	itete	ge
 80025a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80025a6:	89a3      	ldrhlt	r3, [r4, #12]
 80025a8:	181b      	addge	r3, r3, r0
 80025aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025ae:	bfac      	ite	ge
 80025b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80025b2:	81a3      	strhlt	r3, [r4, #12]
 80025b4:	bd10      	pop	{r4, pc}

080025b6 <__swrite>:
 80025b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ba:	461f      	mov	r7, r3
 80025bc:	898b      	ldrh	r3, [r1, #12]
 80025be:	05db      	lsls	r3, r3, #23
 80025c0:	4605      	mov	r5, r0
 80025c2:	460c      	mov	r4, r1
 80025c4:	4616      	mov	r6, r2
 80025c6:	d505      	bpl.n	80025d4 <__swrite+0x1e>
 80025c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025cc:	2302      	movs	r3, #2
 80025ce:	2200      	movs	r2, #0
 80025d0:	f000 f834 	bl	800263c <_lseek_r>
 80025d4:	89a3      	ldrh	r3, [r4, #12]
 80025d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025de:	81a3      	strh	r3, [r4, #12]
 80025e0:	4632      	mov	r2, r6
 80025e2:	463b      	mov	r3, r7
 80025e4:	4628      	mov	r0, r5
 80025e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025ea:	f7ff ba1f 	b.w	8001a2c <_write_r>

080025ee <__sseek>:
 80025ee:	b510      	push	{r4, lr}
 80025f0:	460c      	mov	r4, r1
 80025f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025f6:	f000 f821 	bl	800263c <_lseek_r>
 80025fa:	1c43      	adds	r3, r0, #1
 80025fc:	89a3      	ldrh	r3, [r4, #12]
 80025fe:	bf15      	itete	ne
 8002600:	6560      	strne	r0, [r4, #84]	; 0x54
 8002602:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002606:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800260a:	81a3      	strheq	r3, [r4, #12]
 800260c:	bf18      	it	ne
 800260e:	81a3      	strhne	r3, [r4, #12]
 8002610:	bd10      	pop	{r4, pc}

08002612 <__sclose>:
 8002612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002616:	f000 b801 	b.w	800261c <_close_r>
	...

0800261c <_close_r>:
 800261c:	b538      	push	{r3, r4, r5, lr}
 800261e:	4d06      	ldr	r5, [pc, #24]	; (8002638 <_close_r+0x1c>)
 8002620:	2300      	movs	r3, #0
 8002622:	4604      	mov	r4, r0
 8002624:	4608      	mov	r0, r1
 8002626:	602b      	str	r3, [r5, #0]
 8002628:	f7fe fc9f 	bl	8000f6a <_close>
 800262c:	1c43      	adds	r3, r0, #1
 800262e:	d102      	bne.n	8002636 <_close_r+0x1a>
 8002630:	682b      	ldr	r3, [r5, #0]
 8002632:	b103      	cbz	r3, 8002636 <_close_r+0x1a>
 8002634:	6023      	str	r3, [r4, #0]
 8002636:	bd38      	pop	{r3, r4, r5, pc}
 8002638:	200000d8 	.word	0x200000d8

0800263c <_lseek_r>:
 800263c:	b538      	push	{r3, r4, r5, lr}
 800263e:	4d07      	ldr	r5, [pc, #28]	; (800265c <_lseek_r+0x20>)
 8002640:	4604      	mov	r4, r0
 8002642:	4608      	mov	r0, r1
 8002644:	4611      	mov	r1, r2
 8002646:	2200      	movs	r2, #0
 8002648:	602a      	str	r2, [r5, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	f7fe fc99 	bl	8000f82 <_lseek>
 8002650:	1c43      	adds	r3, r0, #1
 8002652:	d102      	bne.n	800265a <_lseek_r+0x1e>
 8002654:	682b      	ldr	r3, [r5, #0]
 8002656:	b103      	cbz	r3, 800265a <_lseek_r+0x1e>
 8002658:	6023      	str	r3, [r4, #0]
 800265a:	bd38      	pop	{r3, r4, r5, pc}
 800265c:	200000d8 	.word	0x200000d8

08002660 <memcpy>:
 8002660:	440a      	add	r2, r1
 8002662:	4291      	cmp	r1, r2
 8002664:	f100 33ff 	add.w	r3, r0, #4294967295
 8002668:	d100      	bne.n	800266c <memcpy+0xc>
 800266a:	4770      	bx	lr
 800266c:	b510      	push	{r4, lr}
 800266e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002672:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002676:	4291      	cmp	r1, r2
 8002678:	d1f9      	bne.n	800266e <memcpy+0xe>
 800267a:	bd10      	pop	{r4, pc}

0800267c <memmove>:
 800267c:	4288      	cmp	r0, r1
 800267e:	b510      	push	{r4, lr}
 8002680:	eb01 0402 	add.w	r4, r1, r2
 8002684:	d902      	bls.n	800268c <memmove+0x10>
 8002686:	4284      	cmp	r4, r0
 8002688:	4623      	mov	r3, r4
 800268a:	d807      	bhi.n	800269c <memmove+0x20>
 800268c:	1e43      	subs	r3, r0, #1
 800268e:	42a1      	cmp	r1, r4
 8002690:	d008      	beq.n	80026a4 <memmove+0x28>
 8002692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800269a:	e7f8      	b.n	800268e <memmove+0x12>
 800269c:	4402      	add	r2, r0
 800269e:	4601      	mov	r1, r0
 80026a0:	428a      	cmp	r2, r1
 80026a2:	d100      	bne.n	80026a6 <memmove+0x2a>
 80026a4:	bd10      	pop	{r4, pc}
 80026a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80026ae:	e7f7      	b.n	80026a0 <memmove+0x24>

080026b0 <__malloc_lock>:
 80026b0:	4801      	ldr	r0, [pc, #4]	; (80026b8 <__malloc_lock+0x8>)
 80026b2:	f7ff bbc3 	b.w	8001e3c <__retarget_lock_acquire_recursive>
 80026b6:	bf00      	nop
 80026b8:	200000d0 	.word	0x200000d0

080026bc <__malloc_unlock>:
 80026bc:	4801      	ldr	r0, [pc, #4]	; (80026c4 <__malloc_unlock+0x8>)
 80026be:	f7ff bbbe 	b.w	8001e3e <__retarget_lock_release_recursive>
 80026c2:	bf00      	nop
 80026c4:	200000d0 	.word	0x200000d0

080026c8 <_realloc_r>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	4607      	mov	r7, r0
 80026cc:	4614      	mov	r4, r2
 80026ce:	460e      	mov	r6, r1
 80026d0:	b921      	cbnz	r1, 80026dc <_realloc_r+0x14>
 80026d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80026d6:	4611      	mov	r1, r2
 80026d8:	f7ff bc02 	b.w	8001ee0 <_malloc_r>
 80026dc:	b922      	cbnz	r2, 80026e8 <_realloc_r+0x20>
 80026de:	f7ff fbaf 	bl	8001e40 <_free_r>
 80026e2:	4625      	mov	r5, r4
 80026e4:	4628      	mov	r0, r5
 80026e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026e8:	f000 f826 	bl	8002738 <_malloc_usable_size_r>
 80026ec:	42a0      	cmp	r0, r4
 80026ee:	d20f      	bcs.n	8002710 <_realloc_r+0x48>
 80026f0:	4621      	mov	r1, r4
 80026f2:	4638      	mov	r0, r7
 80026f4:	f7ff fbf4 	bl	8001ee0 <_malloc_r>
 80026f8:	4605      	mov	r5, r0
 80026fa:	2800      	cmp	r0, #0
 80026fc:	d0f2      	beq.n	80026e4 <_realloc_r+0x1c>
 80026fe:	4631      	mov	r1, r6
 8002700:	4622      	mov	r2, r4
 8002702:	f7ff ffad 	bl	8002660 <memcpy>
 8002706:	4631      	mov	r1, r6
 8002708:	4638      	mov	r0, r7
 800270a:	f7ff fb99 	bl	8001e40 <_free_r>
 800270e:	e7e9      	b.n	80026e4 <_realloc_r+0x1c>
 8002710:	4635      	mov	r5, r6
 8002712:	e7e7      	b.n	80026e4 <_realloc_r+0x1c>

08002714 <_read_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4d07      	ldr	r5, [pc, #28]	; (8002734 <_read_r+0x20>)
 8002718:	4604      	mov	r4, r0
 800271a:	4608      	mov	r0, r1
 800271c:	4611      	mov	r1, r2
 800271e:	2200      	movs	r2, #0
 8002720:	602a      	str	r2, [r5, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	f7fe fbe8 	bl	8000ef8 <_read>
 8002728:	1c43      	adds	r3, r0, #1
 800272a:	d102      	bne.n	8002732 <_read_r+0x1e>
 800272c:	682b      	ldr	r3, [r5, #0]
 800272e:	b103      	cbz	r3, 8002732 <_read_r+0x1e>
 8002730:	6023      	str	r3, [r4, #0]
 8002732:	bd38      	pop	{r3, r4, r5, pc}
 8002734:	200000d8 	.word	0x200000d8

08002738 <_malloc_usable_size_r>:
 8002738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800273c:	1f18      	subs	r0, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	bfbc      	itt	lt
 8002742:	580b      	ldrlt	r3, [r1, r0]
 8002744:	18c0      	addlt	r0, r0, r3
 8002746:	4770      	bx	lr

08002748 <_init>:
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	bf00      	nop
 800274c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274e:	bc08      	pop	{r3}
 8002750:	469e      	mov	lr, r3
 8002752:	4770      	bx	lr

08002754 <_fini>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	bf00      	nop
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr
